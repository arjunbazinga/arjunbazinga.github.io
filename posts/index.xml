<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Arjun Srivastava</title>
<link>https://www.arjunsriva.com/posts/</link>
<atom:link href="https://www.arjunsriva.com/posts/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Wed, 05 Mar 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>On Deep Learning and Gardening: We’re Still Early</title>
  <link>https://www.arjunsriva.com/posts/deep-learning-and-gradening/</link>
  <description><![CDATA[ 





<section id="on-deep-learning-and-gardening-were-still-early" class="level1">
<h1>On Deep Learning and Gardening: We’re Still Early</h1>
<p>This is one of those posts where I explore what happens when we map concepts from one field to another. Today’s question: What if deep learning is fundamentally like gardening?</p>
<section id="building-vs-growing-two-ways-to-create" class="level2">
<h2 class="anchored" data-anchor-id="building-vs-growing-two-ways-to-create">Building vs Growing: Two Ways to Create</h2>
<p>There are two fundamentally different ways to make things:</p>
<p><strong>Engineering:</strong> You understand how components work and compose them deliberately - like building a table from wood and screws, or scaling up to rockets and engines.</p>
<p><strong>Cultivation:</strong> You can’t directly build a sunflower by assembling parts, but you can grow one by preparing soil, planting a seed, and providing water and sunlight.</p>
<p>Deep learning is like cultivation. We prepare environments, plant architectures, and nurture them to grow capabilities. We’re still early in understanding what truly feeds these systems.</p>
</section>
<section id="the-gardening-analogy-unpacked" class="level2">
<h2 class="anchored" data-anchor-id="the-gardening-analogy-unpacked">The Gardening Analogy Unpacked</h2>
<p>The parallels run deep:</p>
<ul>
<li><strong>Hyperparameters are growing conditions</strong> - Learning rates are watering schedules, batch sizes are pot sizes</li>
<li><strong>Optimization methods are cultivation techniques</strong> - SGD is traditional farming (reliable but inefficient), Adam is drip irrigation (precise resource delivery), and second-order methods are hydroponics (expensive but enabling growth where traditional methods fail, training models that wouldn’t otherwise converge)</li>
<li><strong>Compute clusters are greenhouses</strong> - TPUs are industrial setups, consumer GPUs are home gardens</li>
<li><strong>Regularization is pruning</strong> - Techniques like dropout trim complexity to improve generalization</li>
</ul>
</section>
<section id="genetic-limits-of-architectures" class="level2">
<h2 class="anchored" data-anchor-id="genetic-limits-of-architectures">Genetic Limits of Architectures</h2>
<p>Different neural architectures have inherent capability ceilings, similar to plant height limits:</p>
<ul>
<li><strong>CNNs are bamboo</strong> - Fast growth, early results, but plateau at lower performance ceilings</li>
<li><strong>RNNs are height-limited trees</strong> - Solid structure but inherent limitations (vanishing gradients)</li>
<li><strong>Transformers are redwoods</strong> - Higher ultimate potential, though still bound by architectural ceilings</li>
</ul>
<p>This explains why both scaling AND architectural innovation remain crucial. Just as no amount of perfect soil makes a shrub grow into a sequoia, architectural limitations constrain what even the best-trained models can accomplish.</p>
</section>
<section id="different-plants-for-different-soils" class="level2">
<h2 class="anchored" data-anchor-id="different-plants-for-different-soils">Different Plants for Different Soils</h2>
<p>Architectures, like plant species, specialize for specific environments. We’ve mastered text “soil” (RNNs→Transformers) but lack equally effective architectures for video and audio data - we’re growing text-optimized plants in non-text soils.</p>
<p>Breakthroughs may come from specialized architectures for these untapped resources, like nitrogen-fixing plants evolved symbiotic relationships with soil bacteria. These video/audio architectures would scale as effectively as Transformers do for text.</p>
<p>Nitrogen-fixing plants mostly resemble regular plants with specialized roots. Similarly, effective non-text architectures likely resemble Transformers with modified components (tokenizers, output layers).</p>
<p>Like crop varieties revolutionizing agriculture in new soil types, architectural “species” for non-textual data could unlock vast untapped potential.</p>
</section>
<section id="the-pre-fertilizer-era-of-ai" class="level2">
<h2 class="anchored" data-anchor-id="the-pre-fertilizer-era-of-ai">The Pre-Fertilizer Era of AI</h2>
<p>We’re still in what could be called a “pre-fertilizer” era, working with what nature provides: - Collecting datasets “as they come” (raw soil) - Filtering out obvious problems (removing stones) - Scaling up quantity rather than transforming quality (using more land)</p>
<p>The agricultural revolution didn’t happen by using more land or working harder. It came from understanding exactly what nutrients crops needed.</p>
</section>
<section id="the-key-insight-fertilizer-isnt-soil" class="level2">
<h2 class="anchored" data-anchor-id="the-key-insight-fertilizer-isnt-soil">The Key Insight: Fertilizer Isn’t Soil</h2>
<p>Synthetic examples don’t need to be “realistic” to be effective. Fertilizer looks nothing like soil, yet delivers precisely what plants need.</p>
<p>Look at Microsoft’s Phi models: trained on synthetic “textbook-quality” data rather than massive web scrapes. The result? Phi-1.5 (1.3B parameters) outperforms models 25× its size on reasoning tasks. This is the equivalent of concentrated fertilizer outperforming vast amounts of natural soil.</p>
<p>Other examples: * Stanford’s 1,000 carefully crafted reasoning examples creating stronger capability than millions of natural samples * Chain-of-thought prompting creating “deliberate thinking paths” unlike natural human text * Training signals that isolate specific features without the noise found in natural data</p>
<p>The future isn’t more realistic synthetic data - it’s more effective synthetic data optimized for neural learning dynamics, not human recognizability.</p>
</section>
<section id="implications-and-future-directions" class="level2">
<h2 class="anchored" data-anchor-id="implications-and-future-directions">Implications and Future Directions</h2>
<p>If this analogy holds, history suggests:</p>
<ul>
<li><strong>The Fertilizer Revolution</strong> - Engineered data will transform model performance with less raw material</li>
<li><strong>Monoculture Risks</strong> - AI needs architectural diversity. iPhone zero-days are scary; “Transformer zero-days” would be worse - adversarial attacks compromising all similar AI simultaneously</li>
<li><strong>Hybridization Breakthroughs</strong> - Major advances may come from crossing architectural approaches</li>
</ul>
</section>
<section id="where-will-value-accrue" class="level2">
<h2 class="anchored" data-anchor-id="where-will-value-accrue">Where Will Value Accrue?</h2>
<p>Looking at agriculture’s evolution offers clues:</p>
<ul>
<li><strong>Seed Companies</strong> - AI differs as techniques aren’t easily patented, favoring those who operationalize quickly</li>
<li><strong>Fertilizer Producers</strong> - Companies developing novel data generation could become crucial</li>
<li><strong>Value-Added Processing</strong> - ChatGPT is valuable like McDonald’s is valuable - both transform low-margin raw materials (beef/base models) into high-margin end products through consistent delivery, packaging, and user experience</li>
<li><strong>Distribution Networks</strong> - Unlike agriculture, digital distribution is nearly costless (bits vs.&nbsp;biomass). However, inference still requires substantial infrastructure - you need “land” to grow models and different “land” to keep them producing value, making compute providers more like utility companies than distributors</li>
</ul>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>A fundamental breakthrough will likely come from reimagining what constitutes effective training data.</p>
<p>When we truly understand the “nutrients” that feed neural networks, we’ll create synthetic training approaches that seem almost incomprehensible by today’s standards - concentrated learning signals that don’t resemble test data but drive exponential improvements in capability.</p>
<p>While innovations will continue across architectures, optimization methods, and deployment, this “fertilizer revolution” represents one of the most underexplored and potentially transformative frontiers in AI development.</p>
</section>
<section id="where-the-analogy-breaks-down" class="level2">
<h2 class="anchored" data-anchor-id="where-the-analogy-breaks-down">Where the Analogy Breaks Down</h2>
<p>Analogies are mental models with necessary simplifications. Key differences include:</p>
<ul>
<li><strong>Distribution economics</strong> - Digital distribution has near-zero cost vs.&nbsp;physical agriculture</li>
<li><strong>No decay</strong> - AI models don’t rot</li>
<li><strong>Expandable “land” (temporary)</strong> - We can build compute clusters rapidly, resembling early frontier expansion, before eventual physical/regulatory constraints</li>
<li><strong>Rapid improvements (temporary)</strong> - Models dramatically outperform predecessors, like early selective breeding before improvements became incremental</li>
</ul>
<p>These differences mainly affect short-term dynamics. Long-term, parallels strengthen as AI faces agriculture-like constraints: limited resources, regulation, and incremental improvements.</p>
<p>This suggests agricultural history can still inform AI’s future trajectory, despite different timescales and mechanisms.</p>


</section>
</section>

 ]]></description>
  <category>Analogy</category>
  <category>Future</category>
  <guid>https://www.arjunsriva.com/posts/deep-learning-and-gradening/</guid>
  <pubDate>Wed, 05 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Many Universes That Exist</title>
  <link>https://www.arjunsriva.com/posts/many-universes/</link>
  <description><![CDATA[ 





<section id="the-many-universes-that-exist" class="level1">
<h1>The Many Universes That Exist</h1>
<p>I want to share a way of thinking that I found personally useful. It helps me reason about what exists today, and make predictions.</p>
<p>I hope that by the end of this post, you’ll see some problems differently—recognizing that when something seems impossible, we’re often blind to which constraint is actually limiting us and how that constraint might be shifted.</p>
<p>I’ve been thinking about the different “universes” that define what can exist in our world. I see them as layers of constraints, each limiting what’s possible in its own way:</p>
<ol type="1">
<li><p><strong>The universe of absolute physical possibility</strong>: Things that can actually exist according to the fundamental laws of physics (whether we fully understand these laws or not).</p></li>
<li><p><strong>The universe of theoretical possibility</strong>: Things that can exist according to our current understanding of physics, like space elevators, flying cars, and other technological concepts.</p></li>
<li><p><strong>The universe of engineering possibility</strong>: Things that we know how to build given our current ability to manipulate our environment. This can be mechanical processes, electrical systems, programming, all kinds of fabrication.</p></li>
<li><p><strong>The universe of economic feasibility</strong>: Things that can exist because it’s economically viable for creators to benefit from their creation.</p></li>
<li><p><strong>The universe of legal permissibility</strong>: Things that can exist that are also legal for producers to produce and consumers to consume.</p></li>
<li><p><strong>The universe of moral acceptability</strong>: Things that are morally permissible according to cultural standards.</p></li>
</ol>
<section id="key-insights-about-these-universes" class="level2">
<h2 class="anchored" data-anchor-id="key-insights-about-these-universes">Key Insights About These Universes</h2>
<p>Before diving into specific examples, it’s worth noting some important characteristics of how these universes interact.</p>
<p>What fascinates me is that nothing apart from the absolute physical universe is fixed—these boundaries vary widely across regions of the world and across different eras. We tend to perceive these constraints as constants during our individual lifetimes, severely underestimating how malleable they actually are.</p>
<p>Importantly, these universes don’t operate as simple subsets. For instance, engineering solutions sometimes precede theoretical understanding, and legal frameworks often evolve independently of moral consensus. You don’t need to move sequentially down the chain of constraints, and there are plenty of examples of things that exist in later universes but not in earlier ones. This nuance is often missed in mainstream thought, narrowing our perspective on how the world can evolve.</p>
<p>As we examine these universes, we often encounter a common misconception: the simplest but most misguided story we tell ourselves is that all these universes are aligned and strongly imply one another—that all that is morally right is legal, and all that is legally permitted is moral; or that what can be done according to our current understanding of physics represents all that can ever be done. I find this perspective flawed/incomplete, as the following examples illustrate.</p>
</section>
<section id="physics-vs.-our-understanding" class="level2">
<h2 class="anchored" data-anchor-id="physics-vs.-our-understanding">Physics vs.&nbsp;Our Understanding</h2>
<section id="theoretical-vs.-actual-possibility" class="level3">
<h3 class="anchored" data-anchor-id="theoretical-vs.-actual-possibility">Theoretical vs.&nbsp;Actual Possibility</h3>
<p>I think it’s crucial to consider the gap between “things that can actually exist” versus “things we think can exist based on our current understanding.” The absolute laws of physics determine what is truly possible in our universe, but our theoretical models are always approximations that evolve over time.</p>
</section>
<section id="example-natural-phenomena" class="level3">
<h3 class="anchored" data-anchor-id="example-natural-phenomena">Example: Natural Phenomena</h3>
<p>Throughout history, we’ve continually expanded and restricted what we believed possible as our understanding of the world increased. We once attributed lightning to divine wrath before recognizing it as an atmospheric phenomenon. This fundamentally changed our understanding of what clouds could do—from enforcing divine judgment to producing natural electrical discharges.</p>
<p>This gap between theory and reality becomes even more pronounced when we look at how human innovation has sometimes outpaced scientific explanation.</p>
</section>
<section id="example-engineering-ahead-of-theory" class="level3">
<h3 class="anchored" data-anchor-id="example-engineering-ahead-of-theory">Example: Engineering Ahead of Theory</h3>
<p>Even more fascinating to me is the relationship between theoretical physics and practical engineering. There have been numerous examples where engineers created systems that defied contemporary theoretical understanding—like double-slit experiments before quantum theory was developed, or the photoelectric effect before Einstein’s explanations.</p>
<p>Perhaps the most dramatic illustration of engineering preceding theory comes from early aviation.</p>
</section>
<section id="example-human-flight" class="level3">
<h3 class="anchored" data-anchor-id="example-human-flight">Example: Human Flight</h3>
<p>One of the most striking examples is human flight. In the late 19th century, many prominent physicists and mathematicians, including Lord Kelvin, insisted that heavier-than-air flight was mathematically impossible. Physicist Simon Newcomb published a paper in 1901 proving the “impossibility” of flight just two years before the Wright brothers achieved it in 1903. The physics to properly explain aerodynamics wasn’t fully developed until decades after practical aviation became reality—engineers succeeded where theoretical understanding lagged behind.</p>
</section>
</section>
<section id="legal-and-moral-evolution" class="level2">
<h2 class="anchored" data-anchor-id="legal-and-moral-evolution">Legal and Moral Evolution</h2>
<p>While the examples above show how physical and theoretical universes interact, equally fascinating shifts occur in the realms of legal permissibility and moral acceptance. I find it interesting how many practices that are now illegal might seem as though they’ve always been prohibited, yet their history tells a different story.</p>
<section id="example-copyright-evolution-for-thee-but-not-for-me" class="level3">
<h3 class="anchored" data-anchor-id="example-copyright-evolution-for-thee-but-not-for-me">Example: Copy[right?] Evolution: For Thee But Not For Me</h3>
<p>Copyright is a prime example. From 1790 until 1891, the United States explicitly refused to recognize foreign copyrights. This allowed American publishers to freely reprint British works by Charles Dickens, Lord Byron, and others without paying royalties. Only after the U.S. became a significant producer of intellectual property did it pass the International Copyright Act of 1891, and later lead efforts to establish global copyright standards through agreements like TRIPS in 1994.</p>
<p>This pattern continues today with AI training data. Countries like Japan and Singapore have created explicit copyright exceptions for AI training, allowing companies to use copyrighted materials to train models without permission or payment. Japan’s 2019 copyright amendment permits exploiting works “to the extent considered necessary” when it’s not for “personally enjoying” the content. Singapore similarly amended its laws in 2021 for “computational data analysis.” Both countries have explicitly prioritized AI development over creator rights in this domain.<sup>1</sup></p>
</section>
<section id="example-interest-based-banking" class="level3">
<h3 class="anchored" data-anchor-id="example-interest-based-banking">Example: Interest-Based Banking</h3>
<p>Interest-based banking offers perhaps the most dramatic historical example of how these universes transform and influence each other. In 1139, the Second Lateran Council formally condemned usury as “despicable and blameworthy by divine and human laws.” For centuries, charging interest was not just illegal but considered a grave sin across Christian Europe. Yet today, interest forms the bedrock of global finance—a complete inversion of moral, legal, and economic universes.</p>
<p>This transformation wasn’t simple moral evolution, but rather a complex interaction between universes:</p>
<ol type="1">
<li><p>As Venetian and Genoese merchants expanded long-distance trade in the 13th-15th centuries, economic needs created pressure against moral constraints.</p></li>
<li><p>Ingenious financial engineering emerged in response—merchants developed the bill of exchange, which effectively charged interest through currency conversion while technically avoiding the usury prohibition.</p></li>
<li><p>By the 15th century, even religious institutions needed capital, leading to the creation of “montes pietatis” (charitable pawnshops) that Pope Leo X officially sanctioned in 1515, creating the first Church-approved exception to interest prohibitions.</p></li>
<li><p>Legal accommodation preceded full moral acceptance when Henry VIII of England passed the 1545 Act Against Usury, which—despite its name—actually legalized interest rates up to 10%, creating one of the first regulated interest frameworks.</p></li>
<li><p>Meanwhile, John Calvin developed new theological interpretations, writing in 1545 that business loans were fundamentally different from exploitative usury, providing theoretical justification for what economic reality had already made necessary.</p></li>
</ol>
<p>By 1694, when the Bank of England was founded with interest-bearing government bonds at its core, the transformation was nearly complete. What had been unthinkable in the moral universe of 1200 became the foundation of the economic universe of 1700—demonstrating how dramatically these constraints can shift over time while appearing fixed within a single lifetime.</p>
</section>
<section id="example-lgbtq-rights" class="level3">
<h3 class="anchored" data-anchor-id="example-lgbtq-rights">Example: LGBTQ+ Rights</h3>
<p>Similarly, I’ve observed how moral standards evolve dramatically. The legal treatment of homosexuality demonstrates this evolution starkly. In the United States, sodomy laws criminalized homosexual relationships in most states until Lawrence v. Texas in 2003. Just twelve years later, in 2015, Obergefell v. Hodges established same-sex marriage as a constitutional right—a change that would have been unimaginable to most Americans just a generation earlier.</p>
</section>
</section>
<section id="geographical-divergence-in-legal-systems" class="level2">
<h2 class="anchored" data-anchor-id="geographical-divergence-in-legal-systems">Geographical Divergence in Legal Systems</h2>
<p>Legal frameworks not only evolve over time but can simultaneously develop in opposite directions across different regions.</p>
<section id="example-cannabis-regulation---whats-in-a-name" class="level3">
<h3 class="anchored" data-anchor-id="example-cannabis-regulation---whats-in-a-name">Example: Cannabis Regulation - What’s in a Name?</h3>
<p>Cannabis regulation provides another fascinating example of legal divergence and convergence across geographies. In the 1970s, the United States implemented strict prohibitions through the Controlled Substances Act and pressured other countries, including India, to adopt similar restrictions. India, with its long tradition of cannabis use in religious contexts, created a complex legal framework that banned many forms of cannabis while preserving exceptions for traditional preparations like bhang.</p>
<p>What makes this particularly revealing is that India’s legal system treats different parts of the same plant containing identical THC compounds as completely different substances. Bhang (made from leaves and seeds) remains legal for religious use, while charas (resin) and ganja (flowers) are criminalized—creating an arbitrary distinction with no basis in chemistry or pharmacology. This separation originated during the 1961 UN Single Convention on Narcotic Drugs when India negotiated to exclude bhang from the definition of “cannabis” to protect religious traditions.</p>
<p>Now, in an ironic reversal, many U.S. states have legalized recreational cannabis while it remains formally illegal in India, despite its cultural and religious significance there.</p>
</section>
<section id="example-iran-and-spain-two-trains-passing-in-the-night" class="level3">
<h3 class="anchored" data-anchor-id="example-iran-and-spain-two-trains-passing-in-the-night">Example: Iran and Spain, Two Trains Passing in the Night</h3>
<p>Iran’s revolution demonstrates how legal systems can transform in opposite directions across different regions simultaneously. From 1925 to 1979, Iran developed a largely secular legal system, with the 1975 Family Protection Law establishing family courts, raising the marriage age, and granting women equal rights in divorce and child custody.</p>
<p>The 1979 Islamic Revolution rapidly reorganized this framework. The Family Protection Law was suspended, religious courts replaced secular ones, and various practices previously legal became criminalized. These changes occurred over months, not decades.</p>
<p>During this same period (1975-1985), Spain was moving in the opposite direction. Following Franco’s death in 1975, Spain legalized divorce (1981), decriminalized contraception (1978), and established equality between spouses in marriage (1981). While Iran was centralizing religious authority in governance, Spain was explicitly separating church and state in its 1978 Constitution.</p>
</section>
</section>
<section id="economic-constraints-and-potential" class="level2">
<h2 class="anchored" data-anchor-id="economic-constraints-and-potential">Economic Constraints and Potential</h2>
<p>Economic feasibility represents perhaps the most dynamic boundary because it responds most quickly to innovation in business models and market mechanisms. I believe the universe with the most room for expansion is the economic one—things people can make and want to have, but for which we lack effective pricing mechanisms. These represent somewhat fixed constraints at any given point in time, but as we learn more and invent new techniques, the boundaries shift.</p>
<section id="example-digital-advertising" class="level3">
<h3 class="anchored" data-anchor-id="example-digital-advertising">Example: Digital Advertising</h3>
<p>I’ve seen how innovations in business models and monetization strategies frequently expand this economic universe. Consider how Google’s creation of programmatic ad networks transformed search engines from money-losing ventures into highly profitable businesses. Before this innovation, search engines struggled to monetize their service effectively despite its clear value to users.</p>
</section>
<section id="example-kidney-exchange-markets" class="level3">
<h3 class="anchored" data-anchor-id="example-kidney-exchange-markets">Example: Kidney Exchange Markets</h3>
<p>Similar expansions have occurred through novel market mechanisms. For instance, matching markets for kidney exchanges (as described in Alvin Roth’s “Who Gets What and Why”) created economic feasibility where traditional markets failed due to ethical and legal constraints on direct organ sales. These exchange systems allow donors and recipients to be matched across multiple pairs, dramatically increasing the number of successful transplants without requiring direct monetary transactions for organs.</p>
<p>These innovations in market design illustrate how economic constraints can be overcome without requiring changes in the underlying legal or moral frameworks.</p>
</section>
<section id="example-new-approaches-to-fund-public-goods." class="level3">
<h3 class="anchored" data-anchor-id="example-new-approaches-to-fund-public-goods.">Example: New approaches to fund public goods.</h3>
<p>Another frontier I’m excited about is the development of funding models for public goods that traditional markets undervalue. Quadratic funding, where individual contributions to a project are matched by a central pool according to a formula that rewards broad support, creates economic viability for projects that benefit many people but wouldn’t be funded through conventional means. This approach has been successfully deployed in funding open-source software and other digital public goods that previously relied solely on volunteer efforts or corporate sponsorship.</p>
</section>
</section>
<section id="the-dynamic-interaction-of-universes" class="level2">
<h2 class="anchored" data-anchor-id="the-dynamic-interaction-of-universes">The Dynamic Interaction of Universes</h2>
<p>Looking across these examples, we can observe patterns in how these universes influence each other. An interesting question I keep coming back to concerns the dynamics between these universes. Innovations in one area can accelerate development in others—once we build technology X, we might be able to develop technology Y at a much faster rate.</p>
<p>Sometimes things feel like hard or impossible problems in one universe, with experts in that field declaring them ‘really hard’ or downright ‘impossible,’ making it seem like we’ll just have to live with them. But these same problems become much easier with improvements in other universes. The momentum and improvements in other universes open up new approaches to solve existing problems, often exposing hidden assumptions made when thinking about the problem in just one universe. AlphaFold exemplifies how advances in one universe (computational methods) can suddenly overcome barriers in another (biochemistry) that had challenged scientists for decades.<sup>2</sup></p>
<section id="example-legal-status-and-scientific-research" class="level3">
<h3 class="anchored" data-anchor-id="example-legal-status-and-scientific-research">Example: Legal Status and Scientific Research</h3>
<p>These layers also influence each other in complex ways. What is legal affects what is studied and built, and vice versa. Because psilocybin was criminalized, research on its potential benefits for PTSD and other mental illnesses was stalled for decades.</p>
</section>
<section id="example-practice-preceding-legalization" class="level3">
<h3 class="anchored" data-anchor-id="example-practice-preceding-legalization">Example: Practice Preceding Legalization</h3>
<p>Conversely, what is built and commonly used affects what becomes legal. Cannabis was grown, processed, transported, and consumed long before its legalization began to spread.</p>
</section>
</section>
<section id="the-risk-of-convergence" class="level2">
<h2 class="anchored" data-anchor-id="the-risk-of-convergence">The Risk of Convergence</h2>
<p>As we invent new technologies, I’ve noticed how different layers interact in novel ways. Easier and cheaper enforcement mechanisms (surveillance, AI, fewer competing system/standards) might completely eliminate practices that could be valuable but are defined as illegal at this moment in time.</p>
<p>I worry that as the world becomes more connected and the decisions of the few can be enforced at scale, we risk losing opportunities to discover better ways of doing things. The correlations caused by global interconnectivity not only increase data exchange but also make it harder for non-consensus approaches to emerge.</p>
<p>It becomes increasingly difficult for individuals to deviate from group norms, potentially stifling the discovery of superior approaches.</p>
<p>There are many advantages to connect everyone and everything, but I believe we will inevitably close off pathways to innovation that we have seen arise across geographies and eras.<sup>3</sup></p>
</section>
<section id="a-malleable-world" class="level2">
<h2 class="anchored" data-anchor-id="a-malleable-world">A Malleable World</h2>
<p>I hope the key takeaway from this post is that much of the world we live in today is neither static nor predetermined. We should be careful about assuming what isn’t true today won’t be true tomorrow.</p>
<p>When we encounter ideas that don’t quite work in our current framework, we shouldn’t immediately dismiss them as failures or bad concepts. Often, they’re just a few small tweaks away from becoming something transformative.</p>
<p>The universe of possibility is much bigger than one defaults to believing, and yesterday’s impossibility frequently becomes the reality we live today.</p>
<p>Throughout history, thinkers have recognized this fluidity of possibility in different ways:</p>
<ul>
<li>Everyone knew it was impossible until a fool who didn’t know comes along and does it.</li>
<li>“The reasonable man adapts himself to the world; the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.” — George Bernard Shaw</li>
<li>“The future is already here – it’s just not evenly distributed.” — William Gibson</li>
<li>“A new scientific truth does not triumph by convincing its opponents and making them see the light, but rather because its opponents eventually die, and a new generation grows up that is familiar with it.” — Max Planck, ( I hope the reader agrees that it’s better if one learns before death comes. )</li>
<li>“Life can be much broader once you discover one simple fact: Everything around you that you call life was made up by people that were (like) you” — Steve Jobs</li>
<li>“The true voyage of discovery consists not in seeking new landscapes, but in having new eyes.” — Marcel Proust</li>
<li><a href="https://x.com/waitbutwhy/status/1367871165319049221">All you see is what is, but not what it could have been or what it could be.</a></li>
</ul>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I will not speak of napster…↩︎</p></li>
<li id="fn2"><p>I will be writing another post about this idea more generally, please stay tuned.↩︎</p></li>
<li id="fn3"><p>There is more to be said here both on the problems and potential solutions for managing this challenge, which I will cover in an upcoming post: featuring The father, the mother, NBA, MMA and why I simultaneously love and hate Google.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Business</category>
  <category>Future</category>
  <category>Thoughts</category>
  <guid>https://www.arjunsriva.com/posts/many-universes/</guid>
  <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>On SaaS and Swimming: Hidden Factors of Success</title>
  <link>https://www.arjunsriva.com/posts/saas-and-swimming/</link>
  <description><![CDATA[ 





<p>Sometimes, insight comes from unexpected places. Today, it came from the pool.<br>
Today while swimming, I had a realization: there’s a lot in common between swimming well and running a successful subscription business.</p>
<section id="the-basics-drag-thrust-and-speed" class="level2">
<h2 class="anchored" data-anchor-id="the-basics-drag-thrust-and-speed">The Basics: Drag, Thrust, and Speed</h2>
<p>When you first start swimming, you think it’s all about moving your hands and legs as powerfully as possible. More force equals more speed, right? This is partly true, but it misses a crucial element: drag.</p>
<p>What matters when swimming is your average velocity over a distance. If you have too much drag, you’ll return to zero velocity after each stroke. But when your drag is low enough, you will accumulate speed with each stroke, reaching a top speed much higher than you would even with your strongest stroke.</p>
<p>In business terms:</p>
<ul>
<li>Drag is your Churn rate, i.e.&nbsp;the opposite of retention rate</li>
<li>Thrust is your marketing effort at any given time</li>
<li>Speed in water is your active user base</li>
</ul>
<p>While marketing is necessary, your active userbase (or speed in the water) is a combination of your past marketing efforts and your retention rate.</p>
<p>Here’s a visual comparison of efficient vs inefficient swimming:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/miZ23qeMiR0?si=VJiHuxrN0l4kCNelE" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="the-hidden-drivers" class="level2">
<h2 class="anchored" data-anchor-id="the-hidden-drivers">The Hidden Drivers</h2>
<p>Here’s something counterintuitive: in swimming, your most crucial muscles aren’t the ones you see moving. Your arms and legs create the splash, but it’s your core and hips that truly drive performance. They work silently beneath the surface, maintaining your streamlined form and minimizing drag keeping your body long and horizontal in the water.</p>
<p>The same principle applies in business. It’s easy to fixate on the visible elements - your marketing campaigns, landing pages, and ads. These are your business’s arms and legs, visibly pushing through the market. But your customer support, product reliability, and user experience? They’re your core and hips - less flashy, but absolutely critical.</p>
<p>Just as a swimmer with weak core muscles will struggle regardless of arm strength, a business with poor user experience will flounder despite a massive marketing budget.</p>
</section>
<section id="the-paradox-of-effort" class="level2">
<h2 class="anchored" data-anchor-id="the-paradox-of-effort">The Paradox of Effort</h2>
<p>Even in swimming, there are situations where you need to decide between increasing thrust and reducing drag. A prime example is the use of legs. While leg movement contributes about 15% to overall thrust, it dramatically increases drag and often worsens your form. Counterintuitively, the advice for swimming well, especially when starting out, is to use your legs less – sometimes barely moving them at all.</p>
<p>This paradox has a direct parallel in business. Many companies engage in practices that seem to increase “thrust” but actually create more “drag”:</p>
<ul>
<li>Aggressive upselling and cross-selling</li>
<li>Intrusive advertising</li>
<li>User interface “dark patterns” that trick users into spending more</li>
</ul>
<p>Yes, these tactics might bring in additional revenue (power) in the short term. But in the long run, they increase your drag by driving users away from your product. It’s a classic case of short-term gain leading to long-term pain. For a deeper dive into this concept and how to approach it, I recommend reading the insightful article on <a href="https://zerodha.tech/blog/user-disengagement">user disengagement</a> by Zerodha.</p>
</section>
<section id="reducing-business-drag" class="level2">
<h2 class="anchored" data-anchor-id="reducing-business-drag">Reducing Business Drag</h2>
<p>In business, reducing drag means focusing on retention. I’ve found this means:</p>
<ol type="1">
<li>Understand why people leave. Talk to unhappy customers.</li>
<li>Identify unmet needs and fix what’s broken.</li>
<li>Do the unglamorous work that’s important to customers.</li>
<li>Treat customers as you’d want to be treated, be respectful of their time and attention.</li>
</ol>
<p>These actions might not feel as impactful as big marketing pushes, or as cool as working on bleeding-edge technology, but they’re crucial for long-term success. They’re the equivalent of perfecting your swimming form - less visible, more effective.</p>
</section>
<section id="optimizing-for-success" class="level2">
<h2 class="anchored" data-anchor-id="optimizing-for-success">Optimizing for Success</h2>
<p>Another parallel: You can only optimize one aspect at a time. There’s a limit to what your brain can focus on. In swimming, you might want to improve your arm stroke, leg kick, hip rotation, and breathing simultaneously. In business, you’re juggling product improvements, customer support, marketing, and operations.</p>
<p>Trying to fix everything at once leads to slow progress and ingrained bad habits. Instead:</p>
<ol type="1">
<li>Choose one <a href="https://www.amazon.in/Goal-Process-Ongoing-Improvement/dp/0884271951">specific area</a> for improvement</li>
<li>Practice with perfect form and intense focus</li>
<li>Repeat until the action becomes automatic</li>
</ol>
<p>This applies to both swimming and running a company, but with a key difference. In swimming, “automatic” means the movement becomes part of your neural structure, performed subconsciously. In business, it’s about setting up the right culture, people, processes, and incentives so things run smoothly without constant oversight.</p>
<p>This approach might seem slow, but it leads to sustainable, compounding improvements. You’re not just doing things right when actively focusing - you’re making high standards your default state.</p>
<p>You’ll notice Olympic swimmers cross the pool in minimal strokes - that’s mastery in action. In business, it might look like efficient processes, strong culture, the right people, and well-set incentives.</p>
</section>
<section id="the-long-game" class="level2">
<h2 class="anchored" data-anchor-id="the-long-game">The Long Game</h2>
<p>In swimming and in business, what looks like effort isn’t always what moves you forward.<br>
Sometimes, the key to speed is doing less. Moving your legs less in the water. Pushing your customers less.<br>
Focus on reducing drag. In SaaS, that means understanding your users. Solving their problems. Respecting their time.<br>
It’s not as visible as marketing. But it’s what separates great products from the rest.</p>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>Reflecting on these parallels between swimming and business, I’m reminded of Miyamoto Musashi’s quote, which could be a fitting end to this post.</p>
<blockquote class="blockquote">
<p>“If you know the way broadly you will see it in everything.”</p>
</blockquote>
<p>But I’m also reminded of Abraham Maslow.</p>
<blockquote class="blockquote">
<p>“If the only tool you have is a hammer, you tend to see every problem as a nail.”</p>
</blockquote>
<p>Because while there’s wisdom in drawing parallels, there’s also wisdom in knowing when to put down the metaphorical hammer.</p>
<p>Here are three important ways where the analogy breaks down which you should keep in mind.</p>
<ol type="1">
<li><p>Environmental Consistency: Water provides a consistent environment for swimmers. In contrast, the business landscape is constantly changing, more akin to swimming in a dynamic, unpredictable ocean. your drag (churn) could suddenly rapidly increase because of competitors, regulation, effectiveness of your channels etc.</p></li>
<li><p>Feedback Loops: In swimming, improvements in technique have a relatively linear effect on performance. In business, positive feedback loops (like network effects) can lead to exponential growth, a phenomenon not typically seen in swimming.</p></li>
<li><p>Nature of the End Goal: In swimming, the objective is typically to minimize time over a fixed distance. This is a well-defined, closed-ended goal. In business, particularly for SaaS, the goal is often open-ended growth. There’s no fixed “finish line” - the objective is continuous expansion and improvement, potentially without limit.</p></li>
</ol>
<p>So take this post with a pinch of chlorine, maybe it’ll help you cut through the drag in your business (or your breaststroke), or maybe it’ll just give you a chuckle the next time you’re at the pool.</p>
<p>Either way, happy swimming - and happy entrepreneur-ing!</p>
<p>PS: If you’re learning to swim, I highly recommend “Total Immersion: The Revolutionary Way to Swim Better, Faster, and Easier”.</p>


</section>

 ]]></description>
  <category>Business</category>
  <guid>https://www.arjunsriva.com/posts/saas-and-swimming/</guid>
  <pubDate>Sat, 12 Aug 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Exponentials Everywhere: The S-Curve Challenge in Predicting the Future</title>
  <link>https://www.arjunsriva.com/posts/exponentials-everywhere/</link>
  <description><![CDATA[ 





<section id="a-quick-intro-to-s-curves" class="level2">
<h2 class="anchored" data-anchor-id="a-quick-intro-to-s-curves">A Quick Intro to S-curves</h2>
<p>Today, we’re diving headfirst into the wacky world of S-curves – the Kardashians of the math world. They’re everywhere, they’re unpredictable, and they’ve got more curves than a bag of curly fries.</p>
<p>An S-curve is a mathematical tool that helps us understand systems showing exponential growth, which eventually stabilize at a fixed level. This concept can be applied to various areas of life, including:</p>
<ul>
<li>Product adoption (from “What’s a smartphone?” to “I can’t live without it!”)</li>
<li>Epidemics (yeah, we’re all experts now, aren’t we?)</li>
<li>The spread of juicy gossip in your office (admit it, we’ve all been there)</li>
<li>Bacteria growth (think of that forgotten sandwich in the back of your fridge)</li>
<li>Technological progress (from “The internet will never catch on” to… well, look at us now)</li>
</ul>
<p>The S-curve starts low, then grows rapidly before leveling off. It’s like your motivation during a project: starts slow, panic-fueled middle, and then plateaus just before the deadline.</p>
<p>Now, there are a couple of different questions we’re interested in:</p>
<ol type="1">
<li><p><strong>What’s the endgame? (N - final level)</strong>: In pandemic terms, how many people will ultimately catch the sniffles? For your startup, what’s the total market size for your AI-powered nose hair trimmer?</p></li>
<li><p><strong>When does it get wild? (t0 - inflection point)</strong>: This is the “hold my beer” moment of the curve. It’s when you go from “It’s just a flu” to “WHERE’S ALL THE TOILET PAPER?!”</p></li>
<li><p><strong>How insane is this ride? (k - slope)</strong>: A high k means your growth is so fast it’ll give you whiplash. A low k? Well, let’s just say you might want to pack a sandwich for this journey.</p></li>
<li><p><strong>Are we there yet? (time to reach N)</strong>: How long until we can stop holding our breath? For a pandemic, it’s about knowing when it’s safe to emerge from your toilet paper fort. For your business, it’s knowing how long before you can trade in your ramen noodles for caviar.</p></li>
</ol>
</section>
<section id="the-day-i-tried-to-outsmart-an-s-curve" class="level2">
<h2 class="anchored" data-anchor-id="the-day-i-tried-to-outsmart-an-s-curve">The Day I Tried to Outsmart an S-curve</h2>
<p>You know those days when you think you’ve got it all figured out? Yeah, I had one of those recently. I was staring at a beautiful S-curve, thinking, “I’ve got this. I can predict where this bad boy is going.” Spoiler alert: I couldn’t. And neither can most of us, apparently.</p>
</section>
<section id="the-sigmoid-saga-a-tale-of-overconfidence" class="level2">
<h2 class="anchored" data-anchor-id="the-sigmoid-saga-a-tale-of-overconfidence">The Sigmoid Saga: A Tale of Overconfidence</h2>
<p>This whole adventure started when I stumbled upon an experiment demonstrating the difficulty of fitting an S-curve on noisy data. It’s like one of those magic tricks that leaves you scratching your head, except instead of pulling rabbits out of hats, it’s pulling wildly inaccurate predictions out of seemingly innocent data.</p>
<p>The punchline? Even with just a smidgen of noise, trying to predict a sigmoid model by fitting past values is about as reliable as using a Magic 8-Ball to plan your retirement. And here’s the kicker: that maximum value, N? It can be off by orders of magnitude. It’s like guessing someone’s age and being off by centuries.</p>
</section>
<section id="lets-play-guess-the-curve" class="level2">
<h2 class="anchored" data-anchor-id="lets-play-guess-the-curve">Let’s Play: “Guess the Curve”</h2>
<p>Alright, folks. Time to put on your fortune-teller hats. Below is a little interactive playground where you can mess around with a sigmoid curve. Go ahead, tweak those knobs. Feel the power. Embrace your inner oracle.</p>
<div class="panel-grid layout-sidebar ms-md-0 layout-sidebar-left">
<div class="cell panel-sidebar card bg-light p-2 g-col-24 g-col-lg-7">
<div class="sourceCode cell-code hidden" id="cb1" data-startfrom="53" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 52;"><span id="cb1-53">viewof noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(</span>
<span id="cb1-54">  [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-55">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"noise level"</span>}</span>
<span id="cb1-56">)</span>
<span id="cb1-57">viewof t0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(</span>
<span id="cb1-58">  [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-59">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t0 (inflection point)"</span>}</span>
<span id="cb1-60">)</span>
<span id="cb1-61">viewof k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(</span>
<span id="cb1-62">  [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-63">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k (slope)"</span>}</span>
<span id="cb1-64">)</span>
<span id="cb1-65">viewof L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(</span>
<span id="cb1-66">  [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-67">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N (plateau)"</span>}</span>
<span id="cb1-68">)</span>
<span id="cb1-69">viewof replay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`&lt;button&gt;Replay&lt;/button&gt;`</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-5" data-nodetype="declaration">

</div>
</div>
</div>
</div>
<div class="panel-fill g-col-24 g-col-lg-17 pt-3 pt-lg-0">
<div class="cell">
<div class="sourceCode cell-code hidden" id="cb2" data-startfrom="74" data-source-offset="-0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 73;"><span id="cb2-74">d3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d3@7'</span>)</span>
<span id="cb2-75"></span>
<span id="cb2-76">sigmoid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> t0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> k) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t0)))</span>
<span id="cb2-77"></span>
<span id="cb2-78">objective <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> ([L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> t0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> k]) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb2-79">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigmoid</span>(L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> t0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> k)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-80">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(([t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> v]) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S</span>(t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-81">}</span>
<span id="cb2-82"></span>
<span id="cb2-83"></span>
<span id="cb2-84">fmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fmin"</span>)</span>
<span id="cb2-85"></span>
<span id="cb2-86">solution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> fmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nelderMead</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">objective</span>(n)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-87"></span>
<span id="cb2-88">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-89">  replay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-90">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigmoid</span>(L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> t0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> k)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-91">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-92">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({ length }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> [</span>
<span id="cb2-93">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-94">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> length) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb2-95">  ])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-96">}</span>
<span id="cb2-97"></span>
<span id="cb2-98">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span></span>
<span id="cb2-99"></span>
<span id="cb2-100"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curvePoints</span>(radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) {</span>
<span id="cb2-101">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> tau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-102">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(context) {</span>
<span id="cb2-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb2-104">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">lineStart</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> () <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-105">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">lineEnd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> () <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-106">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">point</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb2-107">        context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveTo</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-108">        context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arc</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tau)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-109">      }</span>
<span id="cb2-110">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-111">  }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-112">}</span>
<span id="cb2-113"></span>
<span id="cb2-114">{</span>
<span id="cb2-115">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-116">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context2d</span>(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-117"></span>
<span id="cb2-118">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d3</span>
<span id="cb2-119">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scaleLinear</span>()</span>
<span id="cb2-120">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">domain</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-121">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-122">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d3</span>
<span id="cb2-123">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scaleLinear</span>()</span>
<span id="cb2-124">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">domain</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb2-125">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>([height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>])</span>
<span id="cb2-126">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nice</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-127">    line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d3</span>
<span id="cb2-128">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">line</span>()</span>
<span id="cb2-129">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span>(context)</span>
<span id="cb2-130">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb2-131">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span>(d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-132"></span>
<span id="cb2-133">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> maxL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-134">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> starti <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-135">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-136"></span>
<span id="cb2-137">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(currentIndex) {</span>
<span id="cb2-138">    context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clearRect</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-139">    </span>
<span id="cb2-140">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Draw all data points</span></span>
<span id="cb2-141">    context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beginPath</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-142">    line<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curvePoints</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-143">    </span>
<span id="cb2-144">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Draw points up to current index</span></span>
<span id="cb2-145">    line<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curvePoints</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> currentIndex))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-146">    context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-147">    context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-148"></span>
<span id="cb2-149">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (currentIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb2-150">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> { <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> solutionX } <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solution</span>(currentIndex)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-151">      solutions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>(solutionX)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-152"></span>
<span id="cb2-153">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Update maxL if necessary</span></span>
<span id="cb2-154">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (solutionX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> maxL) maxL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solutionX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-155"></span>
<span id="cb2-156">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Draw text information</span></span>
<span id="cb2-157">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-158">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fillText</span>(</span>
<span id="cb2-159">        <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`N = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">; est. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>solutionX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> (max </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>maxL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-160">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-161">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-162">      )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-163">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fillText</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`t0 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>t0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">; est. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>solutionX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-164">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fillText</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`k = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">; est. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>solutionX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toFixed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-165"></span>
<span id="cb2-166">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Draw solution curves</span></span>
<span id="cb2-167">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">globalAlpha</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-168">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> solutionIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> starti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-169">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">of</span> solutions) {</span>
<span id="cb2-170">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigmoid</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span>x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-171">          points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(solutionIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>solutionIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(([t]) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> [t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">S</span>(t)])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-172">        context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beginPath</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-173">        line<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(d3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">curveLinear</span>)(points)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-174">        context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strokeStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-175">        context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-176">      }</span>
<span id="cb2-177">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">globalAlpha</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-178">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-179"></span>
<span id="cb2-180">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Draw current point</span></span>
<span id="cb2-181">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beginPath</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-182">      line<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curvePoints</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))([data[currentIndex]])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-183">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-184">      context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-185">    }</span>
<span id="cb2-186">  }</span>
<span id="cb2-187"></span>
<span id="cb2-188">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">canvas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-189"></span>
<span id="cb2-190">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-191">  invalidation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span>(() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> (stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-192"></span>
<span id="cb2-193">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-194">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> Promises<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delay</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-195"></span>
<span id="cb2-196">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> currentIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> starti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> currentIndex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> currentIndex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb2-197">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (stop) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-198">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(currentIndex)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-199">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> Promises<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delay</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-200">  }</span>
<span id="cb2-201">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-4" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-5" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-6" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-7" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-8" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-9" data-nodetype="expression">

</div>
</div>
</div>
</div>
<p>So, what’s the deal with this finicky curve? Let’s break it down:</p>
<ul>
<li><strong>Noise level</strong>: This is like the static on an old TV. A little bit, and you’re squinting. Too much, and you’re watching snow.</li>
<li><strong>t0 (inflection point)</strong>: The curve’s midlife crisis. Where it decides to flip from “growing like crazy” to “slowing down.”</li>
<li><strong>k (slope)</strong>: How steep is this rollercoaster? Adjust this, and you go from kiddie ride to “I want my mommy!”</li>
<li><strong>N (plateau)</strong>: The VIP section. How high can this party go?</li>
</ul>
<p>Play around with these, hit that “Replay” button, and watch chaos ensue. Each faint line represents what our best guess was at that time on how the world will go. On the top left you can see the maximum L it thought over time.</p>
</div>
</div>
</section>
<section id="the-plot-thickens-when-noise-isnt-the-culprit" class="level2">
<h2 class="anchored" data-anchor-id="the-plot-thickens-when-noise-isnt-the-culprit">The Plot Thickens: When Noise Isn’t the Culprit</h2>
<p>Now, here’s where things get really interesting. Set that noise level to zero. Go ahead, I’ll wait. What do you see?</p>
<p>You might expect a perfect, smooth curve with spot-on predictions, right? But nope! Even with zero noise, you’ll notice something curious:</p>
<ol type="1">
<li>The black dots form a perfect, smooth S-curve. No surprises there.</li>
<li>The estimated parameters (L, t0, k) match the true values exactly. So far, so good.</li>
<li>But wait, what’s with those light blue curves shooting off into the stratosphere?</li>
</ol>
<p>That last point is the kicker. Even in our perfect, noise-free world, we’re seeing wildly different predictions for where the curve might end up. And that max L value? It’s through the roof!</p>
<p>This isn’t some glitch in the Matrix or a quirk of computer arithmetic. It’s a glimpse into a fundamental truth about these curves that’s got mathematicians scratching their heads.</p>
</section>
<section id="diving-deeper-the-math-on-why-were-so-bad-at-this" class="level2">
<h2 class="anchored" data-anchor-id="diving-deeper-the-math-on-why-were-so-bad-at-this">Diving Deeper: The Math on Why We’re So Bad at This</h2>
<p>Now, if you thought I was just making this up as I go along (which, let’s be honest, is sometimes true), hold onto your hats. There’s some serious math backing up our struggles with these slippery S-curves.</p>
<p>The research paper “The Limits to Learning a Diffusion Model” <sup>1</sup> by Jackie Baek and friends goes deep on this, I won’t talk about the nitty gritty details here, but here is what these math wizards discovered:</p>
<ol type="1">
<li><p><strong>Size Matters, A Lot</strong>: Remember that ‘N’ parameter in our little game above? The one that kept running away from us? Well, it turns out that estimating the total population size (N) is the real troublemaker here. It’s like trying to guess how many jelly beans are in a jar, except the jar keeps changing size when you’re not looking.</p></li>
<li><p><strong>The Two-Thirds Rule</strong>: Here’s where it gets wild. To get a decent estimate of N, you need to observe about N^(2/3) events. In English? If you’re dealing with a population of 1 million, you need to see about 10,000 events before your guess is even in the ballpark. It’s like needing to eat two-thirds of a cake to guess its flavor. By that point, why even guess?</p></li>
<li><p><strong>Early Bird Doesn’t Get the Worm</strong>: All those early predictions? Basically fancy guesswork. The paper shows that you can’t reliably predict the eventual number of infections (or product adoptions, for you business folks) until you’re about two-thirds of the way to peak infection rate. It’s like trying to guess the ending of a movie when you’re only 20 minutes in.</p></li>
<li><p><strong>Some Things Are Easier Than Others</strong>: Not all is lost! The paper found that other parameters, like the rate of spread, are easier to estimate. It’s like being able to guess the speed of the car, but not how far it’ll go before running out of gas.</p></li>
</ol>
<section id="what-this-means-for-our-little-experiment" class="level3">
<h3 class="anchored" data-anchor-id="what-this-means-for-our-little-experiment">What This Means for Our Little Experiment</h3>
<p>Remember our interactive playground above, especially with the noise set to zero? Now you know why those light blue curves are going bananas. When you’re adjusting that ‘L’ parameter, you’re not just fighting noise – you’re up against the laws of mathematics themselves. Those diverging curves are showing us all the possible futures that fit our data so far. It’s not you, it’s not the noise, it’s not even a computer glitch. It’s the fundamental nature of these curves conspiring to keep us guessing.</p>
</section>
</section>
<section id="why-should-you-care-besides-impressing-people-at-parties" class="level2">
<h2 class="anchored" data-anchor-id="why-should-you-care-besides-impressing-people-at-parties">Why Should You Care? (Besides Impressing People at Parties)</h2>
<p>Now, you might be thinking, “Cool trick, but so what?” Well, my friend, this little experiment has some big implications:</p>
<ol type="1">
<li><p><strong>Epidemic Modeling</strong>: Remember when everyone became an armchair epidemiologist in 2020? This is why even the pros were struggling. Early predictions in disease spread are about as reliable as a weather forecast for next year. Next time you see an early prediction about how bad a disease outbreak will be, take it with a grain of salt.</p></li>
<li><p><strong>Product Adoption</strong>: If you’re in business, dreaming of that hockey stick growth, remember this curve. Your early numbers might be lying to you. Don’t count your exponential chickens before they hatch.</p></li>
<li><p><strong>Data Addiction</strong>: In a world obsessed with data, this is a humbling reminder. Sometimes, more data is just more confusion. Quality over quantity, folks.</p></li>
<li><p><strong>Policy Making</strong>: For the folks in charge, this is a reminder that early interventions are tricky. You’re often working with less information than you think you have.</p></li>
<li><p><strong>Model Complexity</strong>: Simple models are great… until they’re not. This shows why sometimes you need to break out the big guns (and the supercomputers). It’s like the difference between a tricycle and a mountain bike – both have their place, but you wouldn’t take a tricycle off-roading.</p></li>
<li><p><strong>Uncertainty is Certain</strong>: Next time you see a prediction with pinpoint accuracy, remember this curve. The only thing certain about the future is uncertainty. The question should always be How uncertain?</p></li>
</ol>
</section>
<section id="the-take-home-message" class="level2">
<h2 class="anchored" data-anchor-id="the-take-home-message">The Take-Home Message</h2>
<p>Here’s the deal: predicting the future is hard. Like, really hard. Even with fancy math, shiny tools, and zero noise, we’re often just sophisticated guessers. So what do we do?</p>
<ol type="1">
<li>Stay humble. Your model might be wrong. Heck, it’s probably wrong.</li>
<li>Collect data like it’s going out of style. But remember, even a mountain of perfect data can mislead you.</li>
<li>Be flexible. The future has a nasty habit of not conforming to our expectations.</li>
<li>Communicate uncertainty. Don’t just give a number. Give a range, a confidence interval, a <code>¯\_(ツ)_/¯</code> – whatever conveys “This is our best guess, but…”</li>
<li>Remember the two-thirds rule. If you’re not at least that far into your S-curve journey, take your predictions with a hefty dose of skepticism.</li>
</ol>
</section>
<section id="in-conclusion-the-beauty-of-unpredictable-s-curves" class="level2">
<h2 class="anchored" data-anchor-id="in-conclusion-the-beauty-of-unpredictable-s-curves">In Conclusion: The Beauty of Unpredictable S-Curves</h2>
<p>So there you have it, folks. S-curves are trickier than a magician’s rabbit. The next time someone hands you a long-term prediction with pinpoint accuracy, feel free to raise an eyebrow (or two, and tilt your head a little).</p>
<p>As Yogi Berra wisely said, “It’s tough to make predictions, especially about the future.” Turns out, even our fancy math agrees with baseball wisdom.</p>
<p>But here’s the kicker: there’s beauty in this unpredictability. These slippery sigmoids keep scientists on their toes and entrepreneurs on the edge of their seats.</p>
<p>So whether you’re modeling pandemics or predicting startup growth, embrace the challenge. As statistician George Box put it, “All models are wrong, but some are useful.” Our S-curves, quirks and all, showcase our relentless quest to understand an uncooperative universe.</p>
<p>Here’s to the curves that humble us, the data that surprises us, and the inflection points we’re all trying to pinpoint. May your predictions be insightful, your error bars honest, and your sense of wonder endless.</p>
<p>In the grand sigmoid of life, we’re all still climbing.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Read the <a href="https://arxiv.org/abs/2006.06373">paper</a> or listen to the <a href="https://www.youtube.com/watch?v=4IAspdrpNw0">podcast</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Forecasting</category>
  <category>Math</category>
  <guid>https://www.arjunsriva.com/posts/exponentials-everywhere/</guid>
  <pubDate>Wed, 01 Jun 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/exponentials-everywhere/sigmoid.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Experimentation Platforms</title>
  <link>https://www.arjunsriva.com/posts/exerimentations-platforms/</link>
  <description><![CDATA[ 





<section id="books" class="level2">
<h2 class="anchored" data-anchor-id="books">Books</h2>
<ul>
<li><a href="https://www.arjunsriva.com/library/book_1/book_1183.html">Trustworthy Online Controlled Experiments</a></li>
</ul>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ul>
<li><p><a href="https://research.fb.com/wp-content/uploads/2019/06/Top-Challenges-from-the-first-Practical-Online-Controlled-Experiments-Summit.pdf">Top Challenges from the first Practical Online Controlled Experiments Summit</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=HEGI5QN3fXE">A/B Testing Pitfalls: Getting Numbers You Can Trust is Hard</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=wT3dBSVGgjA">USF Business Analytics Forum - Ron Kohavi</a></p></li>
<li><p><a href="http://videolectures.net/kdd2017_tutorial15_software_innovation/">A/B Testing at Scale: Accelerating Software Innovation</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=kTAFOCynWIg">Trustworthy Online Controlled Experiments at Large Scale</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=BanBrr3Hzm8">Always Valid Inference: Continuous Monitoring of A/B Tests</a></p></li>
</ul>
</section>
<section id="companies" class="level2">
<h2 class="anchored" data-anchor-id="companies">Companies</h2>
<section id="netflix" class="level4">
<h4 class="anchored" data-anchor-id="netflix">Netflix</h4>
<ul>
<li><p><a href="https://netflixtechblog.com/tagged/experimentation">Netflix Articles tagged Experimentation</a></p></li>
<li><p><a href="https://netflixtechblog.com/its-all-a-bout-testing-the-netflix-experimentation-platform-4e1ca458c15">It’s All A/Bout Testing: The Netflix Experimentation Platform</a></p></li>
<li><p><a href="https://netflixtechblog.com/reimagining-experimentation-analysis-at-netflix-71356393af21">Reimagining Experimentation Analysis at Netflix</a></p></li>
<li><p><a href="https://drive.google.com/file/d/1TjTkgSzGQXtFxro5vdInUUIpsmJPdCiO/view">Success stories from a democratized experimentation platform</a></p></li>
<li><p><a href="https://netflixtechblog.com/key-challenges-with-quasi-experiments-at-netflix-89b4f234b852">Key Challenges with Quasi Experiments at Netflix</a></p></li>
<li><p><a href="https://netflixtechblog.com/data-compression-for-large-scale-streaming-experimentation-c20bfab8b9ce">Data Compression for Large-Scale Streaming Experimentation</a></p></li>
<li><p><a href="https://netflixtechblog.com/page-simulator-fa02069fb269">Page Simulation for Better Offline Metrics at Netflix</a></p></li>
<li><p><a href="https://netflixtechblog.com/streaming-video-experimentation-at-netflix-visualizing-practical-and-statistical-significance-7117420f4e9a">Streaming Video Experimentation at Netflix: Visualizing Practical and Statistical Significance</a></p></li>
<li><p><a href="https://netflixtechblog.com/interleaving-in-online-experiments-at-netflix-a04ee392ec55">Innovating Faster on Personalization Algorithms at Netflix Using Interleaving</a></p></li>
</ul>
</section>
<section id="microsoft" class="level4">
<h4 class="anchored" data-anchor-id="microsoft">Microsoft</h4>
<ul>
<li><a href="https://exp-platform.com/">ExP Experimentation Platform Accelerating software innovation through trustworthy experimentation</a></li>
<li><a href="https://ai.stanford.edu/~ronnyk/ExPThinkWeek2009Public.pdf">Online Experimentation at Microsoft</a></li>
<li><a href="https://www.microsoft.com/en-us/research/group/experimentation-platform-exp/">Experimentation Platform</a></li>
<li><a href="https://www.microsoft.com/en-us/research/group/experimentation-platform-exp/articles/a-b-testing-and-covid-19-data-driven-decisions-in-times-of-uncertainty/">A/B Testing and Covid-19: Data-Driven Decisions in Times of Uncertainty</a></li>
<li><a href="https://www.microsoft.com/en-us/research/group/experimentation-platform-exp/articles/patterns-of-trustworthy-experimentation-pre-experiment-stage/">Patterns of Trustworthy Experimentation: Pre-Experiment Stage</a></li>
</ul>
</section>
<section id="twitter" class="level4">
<h4 class="anchored" data-anchor-id="twitter">Twitter</h4>
<ul>
<li><a href="https://blog.twitter.com/engineering/en_us/a/2015/twitter-experimentation-technical-overview.html">Twitter experimentation: technical overview</a></li>
</ul>
</section>
<section id="google" class="level4">
<h4 class="anchored" data-anchor-id="google">Google</h4>
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36500.pdf">Overlapping Experiment Infrastructure: More, Better, Faster Experimentation</a></li>
</ul>
</section>
<section id="facebook" class="level4">
<h4 class="anchored" data-anchor-id="facebook">Facebook</h4>
<ul>
<li><a href="http://facebook.github.io/planout/">PlanOut is a library and interpreter for designing online experiments.</a></li>
<li><a href="https://github.com/facebook/Ax">Adaptive Experimentation Platform</a></li>
</ul>
</section>
<section id="spotify" class="level4">
<h4 class="anchored" data-anchor-id="spotify">Spotify</h4>
<ul>
<li><a href="https://engineering.atspotify.com/2020/10/29/spotifys-new-experimentation-platform-part-1/">Spotify’s New Experimentation Platform part 1</a></li>
<li><a href="https://engineering.atspotify.com/2020/11/02/spotifys-new-experimentation-platform-part-2/">Spotify’s New Experimentation Platform part 2</a></li>
<li><a href="https://www.infoq.com/news/2016/12/large-experimentation-spotify/">Large Scale Experimentation at Spotify</a></li>
</ul>
</section>
<section id="tinder" class="level4">
<h4 class="anchored" data-anchor-id="tinder">Tinder</h4>
<ul>
<li><a href="https://medium.com/tinder-engineering/phoenix-tinders-testing-platform-part-i-8e51c19ca977">Phoenix — Tinder’s Testing Platform, Part — I</a></li>
<li><a href="https://medium.com/tinder-engineering/phoenix-tinders-testing-platform-part-ii-e99fbc72af55">Phoenix — Tinder’s Testing Platform — Part II</a></li>
<li><a href="https://medium.com/tinder-engineering/phoenix-tinders-testing-platform-part-iii-520728b9537">Phoenix — Tinder’s Testing Platform — Part III</a></li>
</ul>
</section>
<section id="linkedin" class="level4">
<h4 class="anchored" data-anchor-id="linkedin">LinkedIn</h4>
<ul>
<li><a href="https://engineering.linkedin.com/blog/2020/our-evolution-towards-t-rex--the-prehistory-of-experimentation-i">Our evolution towards T-REX: The prehistory of experimentation infrastructure at LinkedIn</a></li>
<li><a href="https://engineering.linkedin.com/blog/2020/making-the-linkedin-experimentation-engine-20x-faster">Making the LinkedIn experimentation engine 20x faster</a></li>
</ul>
</section>
<section id="uber" class="level4">
<h4 class="anchored" data-anchor-id="uber">Uber</h4>
<ul>
<li><a href="https://eng.uber.com/xp/">Under the Hood of Uber’s Experimentation Platform</a></li>
<li><a href="https://conferences.oreilly.com/strata/strata-ny-2018/public/schedule/detail/69126.html">A/B testing at Uber: How we built a BYOM (bring your own metrics) platform</a></li>
<li><a href="https://eng.uber.com/experimentation-platform/">Building an Intelligent Experimentation Platform with Uber Engineering</a></li>
</ul>
</section>
<section id="airbnb" class="level4">
<h4 class="anchored" data-anchor-id="airbnb">AirBnB</h4>
<ul>
<li><a href="https://medium.com/airbnb-engineering/4-principles-for-making-experimentation-count-7a5f1a5268a">4 Principles for Making Experimentation Count</a></li>
<li><a href="https://medium.com/airbnb-engineering/https-medium-com-jonathan-parks-scaling-erf-23fd17c91166">Scaling Airbnb’s Experimentation Platform</a></li>
<li><a href="https://medium.com/airbnb-engineering/experiment-reporting-framework-4e3fcd29e6c0#.cbl72jip2">Experiment Reporting Framework</a></li>
</ul>
</section>
<section id="instagram" class="level4">
<h4 class="anchored" data-anchor-id="instagram">Instagram</h4>
<ul>
<li><a href="https://instagram-engineering.com/lessons-learned-at-instagram-stories-and-feed-machine-learning-54f3aaa09e56">Lessons Learned at Instagram Stories and Feed Machine Learning</a></li>
</ul>
</section>
<section id="go-jek" class="level4">
<h4 class="anchored" data-anchor-id="go-jek">Go-Jek</h4>
<ul>
<li><a href="https://blog.gojekengineering.com/introducing-litmus-gojeks-own-experimentation-platform-3803467b6a53">Introducing Litmus: GOJEK’s Own Experimentation Platform</a></li>
</ul>
</section>
<section id="instacart" class="level4">
<h4 class="anchored" data-anchor-id="instacart">InstaCart</h4>
<ul>
<li><a href="https://tech.instacart.com/it-all-depends-4bb7b22e854b">Randomized, controlled experiments and multivariate regression are used to continuously improve the grocery delivery engine</a></li>
</ul>
</section>
<section id="pintrest" class="level4">
<h4 class="anchored" data-anchor-id="pintrest">Pintrest</h4>
<ul>
<li><a href="https://medium.com/pinterest-engineering/building-pinterests-a-b-testing-platform-ab4934ace9f4">Building Pinterest’s A/B testing platform</a></li>
</ul>
</section>
</section>
<section id="conferences" class="level2">
<h2 class="anchored" data-anchor-id="conferences">Conferences</h2>
<ul>
<li><a href="https://experimentationcultureawards.com/#register">Experimentation Culture Awards</a></li>
</ul>
</section>
<section id="sass-solutions" class="level2">
<h2 class="anchored" data-anchor-id="sass-solutions">SASS solutions</h2>
<ul>
<li><a href="https://www.split.io/">Split.io</a></li>
<li><a href="https://www.optimizely.com/">Optimizely</a></li>
</ul>
</section>
<section id="when-you-cant-run-ab-tests" class="level2">
<h2 class="anchored" data-anchor-id="when-you-cant-run-ab-tests">When you can’t run A/B Tests</h2>
<ul>
<li><a href="https://netflixtechblog.com/quasi-experimentation-at-netflix-566b57d2e362">Quasi Experimentation at Netflix</a></li>
<li><a href="https://netflixtechblog.com/key-challenges-with-quasi-experiments-at-netflix-89b4f234b852">Key Challenges with Quasi Experiments at Netflix</a></li>
<li><a href="https://www.arjunsriva.com/library/book_1/book_1176.html">Mostly Harmless Econometrics: An Empiricist’s Companion</a></li>
</ul>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<section id="codemit-experimentation-platforms" class="level3">
<h3 class="anchored" data-anchor-id="codemit-experimentation-platforms"><a href="https://youtu.be/8yLC5oBP9fI">2020 CODE@MIT Experimentation platforms</a></h3>
<ul>
<li>Gaussian processes</li>
<li>Multi touch attributions</li>
<li>Heterogenous treatment effect</li>
<li>Interaction effects</li>
<li>Overlapping experiments</li>
<li>What are potential over evaluation criteria ?</li>
<li>What are good guardrail metrics ?</li>
<li>run A/A tests.</li>
</ul>
<p>Canary Deploys by using Experimentation platform to tell when you break guard rail metrics</p>


</section>
</section>

 ]]></description>
  <category>Experimentation</category>
  <guid>https://www.arjunsriva.com/posts/exerimentations-platforms/</guid>
  <pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/exerimentations-platforms/experimentation.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Course Schedule Generator</title>
  <link>https://www.arjunsriva.com/posts/course-schedule-generator/</link>
  <description><![CDATA[ 





<p>A website which allows students of IIT Indore to add courses they are interested in to their calendar.<br>
I was tired of doing this manually every time.<br>
Use it <a href="https://arjunbazinga.github.io/course-schedule-generator/">here</a></p>



 ]]></description>
  <category>IIT Indore</category>
  <guid>https://www.arjunsriva.com/posts/course-schedule-generator/</guid>
  <pubDate>Wed, 08 Jan 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Harry Potter quiz</title>
  <link>https://www.arjunsriva.com/posts/harry-potter-quiz/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/harry-potter-quiz/pottermania.jpg" class="img-fluid figure-img"></p>
<figcaption>Pottermania 2018</figcaption>
</figure>
</div>
<p>The goal of the is to be something easy that anybody with little experience in quizzing can take part in. created with Bitan, and Keyur as part of Quiz club.</p>
<section id="questions" class="level3">
<h3 class="anchored" data-anchor-id="questions">Questions</h3>
<p>Get the <a href="./Questions.pdf">questions.</a></p>
<p>Get the <a href="https://youtu.be/gskB-IyGD6I">video for question number 14</a></p>
<p>Get the <a href="./music.mp3">Music for question number 20</a></p>
</section>
<section id="answers" class="level3">
<h3 class="anchored" data-anchor-id="answers">Answers</h3>
<p>Get the <a href="./PotterMania-Answers.pdf">answers.</a></p>


</section>

 ]]></description>
  <category>IIT Indore</category>
  <category>Quiz</category>
  <guid>https://www.arjunsriva.com/posts/harry-potter-quiz/</guid>
  <pubDate>Sun, 26 Aug 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/harry-potter-quiz/pottermania.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The state of reading in 2018 and beyond.</title>
  <link>https://www.arjunsriva.com/posts/state-of-reading/</link>
  <description><![CDATA[ 





<p>Audio books are seeing a resurgence, because of companies like Audible.<br>
Text to speech is good, and is getting <a href="https://deepmind.com/blog/article/wavenet-generative-model-raw-audio">better</a> .<br>
Wireless Bluetooth <a href="https://www.apple.com/airpods/">earphones</a> are becoming common place, the increase in convenience and battery life allows people to have them on longer.<br>
Unlike content that you have to watch/read, you can work on other stuff while you listen.<br>
I see a time where we can listen to most of the things we read.<br>
Creates a whole new kind of medium.<br>
News, blog posts and Stories most affected.<br>
Most of the speech generated by machines.<br>
Most of the classic texts available for free on the <a href="http://libgen.is/">internet</a>.</p>



 ]]></description>
  <category>Future</category>
  <guid>https://www.arjunsriva.com/posts/state-of-reading/</guid>
  <pubDate>Sun, 05 Aug 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Friend Or Foe</title>
  <link>https://www.arjunsriva.com/posts/friend-or-foe/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/friend-or-foe/environment.jpg" class="img-fluid figure-img"></p>
<figcaption>Co-opeartive and Adversarial Environments</figcaption>
</figure>
</div>
<p>This is a mini interactive “game”, I made inspired by the paper, without giving too much away, I urge you to <a href="https://arjunsriva.com/fof">play</a>.</p>
<p><a href="https://arxiv.org/abs/1711.09883">AI Safety Grid Worlds</a>,</p>



 ]]></description>
  <category>AI</category>
  <category>Projects</category>
  <guid>https://www.arjunsriva.com/posts/friend-or-foe/</guid>
  <pubDate>Sat, 28 Jul 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/friend-or-foe/environment.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Infant Mortality In India</title>
  <link>https://www.arjunsriva.com/posts/infant-mortality/</link>
  <description><![CDATA[ 





<p>I thought about this after reading <a href="https://www.arjunsriva.com/library/book_0/book_8.html">Doing good better</a>.</p>
<p>Soon after I found out about kepler.gl which made this the perfect project to test it out.</p>
<p>I extracted the data I needed for my analysis from a PDF of an annual summary report by the Government of India, available <a href="https://nrhm-mis.nic.in/Pages/RHS2017.aspx">here</a>, as I couldn’t find a comprehensive and user-friendly source.</p>
<p>You can read the analysis <a href="https://arjunsriva.com/infantmortality">here</a>.</p>
<p><a href="https://kepler.gl/#/demo?mapUrl=https://www.arjunsriva.com/posts/infant-mortality/kepler.gl.json">Here</a> is the kepler.gl map I created for this analysis.</p>
<p>It contains the following layers:</p>
<ul>
<li>Total Lives Lost: The number of infants who died in each state. The height of each region is proportional to the number of lives lost, with redder regions having a higher infant mortality rate.</li>
<li>Total Population : The population of each state. The height of each region is proportional to the population, with bluer regions having a higher birth rate.</li>
<li>Total Lives Lost Rural: The same as Total Lives Lost, but only for rural areas in each state.</li>
<li>Total Lives Lost Urban: The same as Total Lives Lost, but only for urban areas in each state.</li>
</ul>
<p>Once the map loads you can click on the layers on the right to toggle them on and off. You can also click on the layers to see the data for each region.</p>
<p>The json file for the map is available <a href="kepler.gl.json">here</a>.</p>
<iframe src="https://kepler.gl/#/demo?mapUrl=https://www.arjunsriva.com/posts/infant-mortality/kepler.gl.json" style="border:0px #ffffff none;" name="myiFrame" scrolling="no" frameborder="1" marginheight="0px" marginwidth="0px" height="70%" width="100%" allowfullscreen=""></iframe>



 ]]></description>
  <category>Analysis</category>
  <guid>https://www.arjunsriva.com/posts/infant-mortality/</guid>
  <pubDate>Fri, 15 Jun 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/infant-mortality/infantmortality.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Jargonizer</title>
  <link>https://www.arjunsriva.com/posts/jargonizer/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/jargonizer/jargonizer.webp" class="img-fluid figure-img"></p>
<figcaption>Jargonizer</figcaption>
</figure>
</div>
<p>What if instead of aiming for clarity and conciesness, our goal was to make our sentences as unweildy and hard to understand as possible?</p>
<p>A simple way to do this is to replace easy to understand phrases with harder ones. Wikipedia <a href="https://web.archive.org/web/20190622035102/https://en.wikipedia.org/wiki/List_of_plain_English_words_and_phrases">maintains</a><sup>1</sup> one such list for us. <a href="https://arjunbazinga.github.io/jargonizer">Here is the website</a> I made so you can play with it online as well, it all runs in your browser, no text is sent to a server.</p>
<p>Reading at the output generated from this, I can’t help but feel like I am reading a legal document.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Used to 🥲↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Projects</category>
  <guid>https://www.arjunsriva.com/posts/jargonizer/</guid>
  <pubDate>Tue, 12 Jun 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/jargonizer/jargonizer.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Multi Armed Bandits</title>
  <link>https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits.html</link>
  <description><![CDATA[ 





<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>Imagine you are at a casino, and you have N slot machines to play, each slot machine gives rewards according to a fixed probability distribution. What strategy should you play with to maximise your total reward ?</p>
<p>This problem is known as <a href="https://en.wikipedia.org/wiki/Multi-armed_bandit">Multi Armed Bandit</a> problem.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importing numpy for math, and matplotlib for plots</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
</section>
<section id="arms" class="level2">
<h2 class="anchored" data-anchor-id="arms">Arms</h2>
<p>An arm when pulled, gives a random number from a normal distribution with fixed mean(mu) and deviation(sigma). When pulled many times the frequency of the rewards look like this:</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Normal_Distribution_PDF.svg/350px-Normal_Distribution_PDF.svg.png" class="img-fluid" alt="normal distribution"> X axis is the magnitude of reward<br>
Y axis is it’s frequency.</p>
<p>The Arm class provides an arm with these properties.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Arm:</span>
<span id="cb2-2"></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mu <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.absolute(np.random.uniform())</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu</span>
<span id="cb2-8">        </span>
<span id="cb2-9">        </span>
<span id="cb2-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> sigma <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.absolute(np.random.uniform())</span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma</span>
<span id="cb2-14"></span>
<span id="cb2-15"></span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> pull(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-17">        reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mu, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> reward</span>
<span id="cb2-19"></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_arms(k):</span>
<span id="cb2-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns a list of arms</span></span>
<span id="cb2-23">    arms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb2-25">        arms.append(Arm())</span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> arms</span></code></pre></div>
</div>
</section>
<section id="agents" class="level2">
<h2 class="anchored" data-anchor-id="agents">Agents</h2>
<p>An agent here is a player who pulls arms to play. It has a policy, which is a list of probabilities associated with each arm.</p>
<p>The agent class makes designing agents <strong>fast</strong>. The object is initialised with arms and whether it should play all arms once as part of the initialisation.</p>
<p>Features provided by this class:<br>
Attributes: * expectations[i]: gives the expected reward on playing arm[i] * times_played[i]: gives the number of times the agent has played arm[i] * N = Total number of times agent has played * reward_history : list of rewards earned by the agent * choice_history : list of choices made by the agent</p>
<p>Methods: * gamble(i): Plays for i iterations while updating it’s policy. * play(i): Pulls arm[i] and updates reward_history, N , times_played * select_arm(): returns index of an arm by sampling probability distribution given by the policy</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> agent:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arms))</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.times_played <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arms))</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arms</span>
<span id="cb3-6"></span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arms)</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.choice_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-12"></span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> play_once <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms):</span>
<span id="cb3-15">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.play(i)</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> play(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb3-18">        reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arms[index].pull()</span>
<span id="cb3-19"></span>
<span id="cb3-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.times_played[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.choice_history.append(index)</span>
<span id="cb3-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward_history.append(reward)</span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> reward</span>
<span id="cb3-27"></span>
<span id="cb3-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_expectations(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, reward, index):</span>
<span id="cb3-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations[index])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N</span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_arm(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-35">        options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms)</span>
<span id="cb3-36">        i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(options, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.policy(), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> i</span>
<span id="cb3-38"></span>
<span id="cb3-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gamble(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, iterations):</span>
<span id="cb3-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(iterations):</span>
<span id="cb3-41">            index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.select_arm()</span>
<span id="cb3-42">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.play(index)</span>
<span id="cb3-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update_expectations(reward, index)</span></code></pre></div>
</div>
<section id="example-agents" class="level3">
<h3 class="anchored" data-anchor-id="example-agents">Example agents</h3>
<p>To make a new agent we <a href="">inherit</a> the agent class.</p>
<p>Time to make some agents!</p>
</section>
<section id="first-up-epsilon-greedy" class="level3">
<h3 class="anchored" data-anchor-id="first-up-epsilon-greedy">First up: epsilon-greedy</h3>
<p>This agent plays the arm with the highest expected reward with <em>1 - epsilon</em> probability, and plays a random arm with <em>epsilon</em> probability</p>
<p>So<br>
epsilon = 1 =&gt; random choices<br>
epsilon = 0 =&gt; greedy choices</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> epsilon_greedy(agent):</span>
<span id="cb4-2"></span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb4-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epsilon</span>
<span id="cb4-6">        </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epsilon-Greedy Agent, epsilon= "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon)</span>
<span id="cb4-9">    </span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-11">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)</span>
<span id="cb4-12">        temp[np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon</span>
<span id="cb4-13">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms</span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
</section>
<section id="beta-softmax" class="level3">
<h3 class="anchored" data-anchor-id="beta-softmax">Beta-Softmax</h3>
<p>This agent plays an arm[i] with probability proportional to: e^(expected_reward(arm[i])/beta)<br>
We normalise the whole thing by the sum over all the arms.</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> softmax(agent):</span>
<span id="cb5-2"></span>
<span id="cb5-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta</span>
<span id="cb5-6">        </span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Softmax agent, beta= "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb5-9"></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-11">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb5-12">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
</section>
<section id="upper-confidence-bound-ucb1" class="level3">
<h3 class="anchored" data-anchor-id="upper-confidence-bound-ucb1">Upper Confidence Bound (UCB1)</h3>
<p>UCB1 agent plays the arm with the highest metric, where metric of arm i is : metric[i] = expected_reward[i] + sqrt(2*log(N)/times_played[i])</p>
<p><strong>Note</strong> Best peformance when rewards are between 0 and 1</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ucb(agent):</span>
<span id="cb6-2"></span>
<span id="cb6-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb6-5"></span>
<span id="cb6-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UCB1 agent"</span></span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-10">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.times_played)</span>
<span id="cb6-11">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(temp)</span>
<span id="cb6-12">        ans[np.argmax(temp)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
</section>
</section>
<section id="metrics" class="level2">
<h2 class="anchored" data-anchor-id="metrics">Metrics</h2>
<p>Metric : A scalar number, makes comparison easier.<br>
To compare the performance of our agents we can use these metrics</p>
<ul>
<li><p>avg_reward[i] : this gives the average reward till i+1 iteration.</p></li>
<li><p>max_reward : this tells us the maximum expected reward</p></li>
<li><p>euclid_distance : we can think of as learnt policy and optimal policy as vectors and compute the distance between them , smaller is better</p></li>
<li><p>cosine_simmilarity : compute the cos(q) between the policies. larger is better</p></li>
</ul>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> maxreward(arms):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Max rewards</span></span>
<span id="cb7-3">    a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [arm.mu <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> arms]</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(a)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> avg_reward(rewards):</span>
<span id="cb7-7">    ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-8">    ans.append(rewards[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rewards)):</span>
<span id="cb7-10">        ans.append(ans[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>rewards[i])</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ans)):</span>
<span id="cb7-12">        ans[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cosine_similarity(a,b):</span>
<span id="cb7-16">    temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b</span>
<span id="cb7-17">    temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>(euclid_distance(a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> euclid_distance(b))</span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-19">    </span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> euclid_distance(a):</span>
<span id="cb7-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.sqrt(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<section id="test" class="level3">
<h3 class="anchored" data-anchor-id="test">Test</h3>
<p>This function takes a list of agents and the number of iterations. Makes each agent play, and prints its metrics.</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test(agents, iterations):</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> agents:</span>
<span id="cb8-3">        </span>
<span id="cb8-4">        agent.gamble(iterations)</span>
<span id="cb8-5">        </span>
<span id="cb8-6">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ arm.mu <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> levers] </span>
<span id="cb8-7">        optimal_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(agent.expectations)</span>
<span id="cb8-8">        optimal_policy[temp.index(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(temp))] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-9">        </span>
<span id="cb8-10">        avg_rewards_earned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> avg_reward(agent.reward_history)</span>
<span id="cb8-11">        </span>
<span id="cb8-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(agent)</span>
<span id="cb8-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maximum possible reward:"</span>, maxreward(levers))</span>
<span id="cb8-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average reward:"</span>, avg_rewards_earned[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb8-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine similarity"</span> ,cosine_similarity(agent.policy(), optimal_policy))</span>
<span id="cb8-16">        euclid_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> euclid_distance(agent.policy()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>optimal_policy)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(optimal_policy)</span>
<span id="cb8-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"euclidian norm "</span>,euclid_norm)</span>
<span id="cb8-18">        </span>
<span id="cb8-19">        </span>
<span id="cb8-20">        plt.plot(avg_rewards_earned)</span>
<span id="cb8-21">        plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Average Reward'</span>)</span>
<span id="cb8-22">        plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iteration'</span>)</span>
<span id="cb8-23">        plt.show()</span>
<span id="cb8-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-25">    </span>
<span id="cb8-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("optimal policy:" , optimal)</span></span>
<span id="cb8-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("learnt policy:" ,agent.policy())</span></span>
<span id="cb8-28">        </span>
<span id="cb8-29">    </span>
<span id="cb8-30">        </span>
<span id="cb8-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.scatter(range(len(agent.choice_history)),y=agent.choice_history)</span></span>
<span id="cb8-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.title("Choices")</span></span>
<span id="cb8-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.xlabel("time")</span></span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.ylabel("arm")</span></span>
<span id="cb8-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.show()</span></span>
<span id="cb8-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("\n")</span></span>
<span id="cb8-37">    </span>
<span id="cb8-38">    </span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">levers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_arms(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3">agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-4">    epsilon_greedy(levers, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb9-5">    epsilon_greedy(levers, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb9-6">    softmax(levers, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>),</span>
<span id="cb9-7">    ucb(levers)</span>
<span id="cb9-8"></span>
<span id="cb9-9">]</span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plt.plot([ arm.mu <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> levers] )</span>
<span id="cb10-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distribution of expected value of arms"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Text(0.5, 1.0, 'distribution of expected value of arms')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-11-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-20" class="cell" data-scrolled="false" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">test(agents, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epsilon-Greedy Agent, epsilon= 1
maximum possible reward: 0.9851042878107023
average reward: [0.47962497]
cosine similarity 0.3162277660168379
euclidian norm  0.09486832980505139</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

Epsilon-Greedy Agent, epsilon= 0
maximum possible reward: 0.9851042878107023
average reward: [0.98686237]
cosine similarity 1.0
euclidian norm  0.0</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

Softmax agent, beta= 0.1
maximum possible reward: 0.9851042878107023
average reward: [0.91348264]
cosine similarity 0.9992727823574249
euclidian norm  0.008915931500017809</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

UCB1 agent
maximum possible reward: 0.9851042878107023
average reward: [0.89258379]
cosine similarity 0.0
euclidian norm  0.1414213562373095</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
</code></pre>
</div>
</div>
</section>
<section id="experimental-stuff" class="level3">
<h3 class="anchored" data-anchor-id="experimental-stuff">Experimental stuff:</h3>
<p>Below are a few agents I wrote for fun.</p>
<div id="cell-22" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> softmax_with_exponentiation(agent):</span>
<span id="cb18-3"></span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb18-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta</span>
<span id="cb18-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.exp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp</span>
<span id="cb18-8"></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-10">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb18-11">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-12">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.exp</span>
<span id="cb18-13">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(ans, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span>
<span id="cb18-15"></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> softmax_with_reccurence(agent):</span>
<span id="cb18-18"></span>
<span id="cb18-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb18-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l</span>
<span id="cb18-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta</span>
<span id="cb18-23"></span>
<span id="cb18-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-25">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb18-26">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-27"></span>
<span id="cb18-28">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.multiply(new_policy, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy)</span>
<span id="cb18-29">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(result, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result</span>
<span id="cb18-31"></span>
<span id="cb18-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb18-33"></span>
<span id="cb18-34"></span>
<span id="cb18-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> greedy_with_reccurence(agent):</span>
<span id="cb18-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha = number &lt; 1; will sum over a number of observations and will keep</span></span>
<span id="cb18-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># osiclating.</span></span>
<span id="cb18-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha = N will allow the algo to converge to an arm, greedy doesn't</span></span>
<span id="cb18-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># really need this, kind of always give one answer.</span></span>
<span id="cb18-40"></span>
<span id="cb18-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-42">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb18-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)</span>
<span id="cb18-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha</span>
<span id="cb18-45"></span>
<span id="cb18-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-47">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)</span>
<span id="cb18-48">        new_policy[np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-49"></span>
<span id="cb18-50">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy</span>
<span id="cb18-51"></span>
<span id="cb18-52">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(new_policy, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_policy</span>
<span id="cb18-54"></span>
<span id="cb18-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> new_policy</span>
<span id="cb18-56"></span>
<span id="cb18-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class magic(agent):</span></span>
<span id="cb18-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    def __init__(self, arms, play_once=1, exp=1):</span></span>
<span id="cb18-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        super().__init__(arms, play_once)</span></span>
<span id="cb18-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        self.old_policy = np.ones_like(self.expectations)/self.l</span></span>
<span id="cb18-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        self.exp = exp</span></span>
<span id="cb18-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb18-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    def policy(self):</span></span>
<span id="cb18-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        new_policy = f(old_policy, g(expectations))</span></span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <category>AI</category>
  <guid>https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits.html</guid>
  <pubDate>Sun, 12 Nov 2017 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/multi-armed-bandits/MultiArmedBandits.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Learning Machine Learning</title>
  <link>https://www.arjunsriva.com/posts/learning-machine-learning/</link>
  <description><![CDATA[ 





<p>This post will talk about resources for how I’m going about learning machine learning.</p>
<section id="books" class="level3">
<h3 class="anchored" data-anchor-id="books">Books</h3>
<ul>
<li>“Hands-On Machine Learning with Scikit-Learn and TensorFlow” by Aurélien Géron</li>
<li>“Deep Learning” by Ian Goodfellow, Yoshua Bengio, and Aaron Courville</li>
<li>“The Elements of Statistical Learning” by Trevor Hastie, Robert Tibshirani, and Jerome Friedman</li>
</ul>
</section>
<section id="blogs" class="level3">
<h3 class="anchored" data-anchor-id="blogs">Blogs</h3>
<ul>
<li><a href="https://distill.pub/">Distill.pub</a>: Clear, interactive explanations of machine learning concepts</li>
<li><a href="https://ruder.io/">Sebastian Ruder’s blog</a>: In-depth articles on NLP and deep learning</li>
<li><a href="http://karpathy.github.io/">Andrej Karpathy’s blog</a>: Excellent posts on deep learning</li>
</ul>
</section>
<section id="podcasts" class="level3">
<h3 class="anchored" data-anchor-id="podcasts">Podcasts</h3>
<p>These podcasts are amazing,and what got me interested in the first place. Get a podcast app, I love podcast addict (android). Some awesome podcasts:</p>
<ul>
<li><a href="http://partiallyderivative.com">Partially Derivative</a></li>
<li><a href="http://lineardigressions.com/">Linear Digressions</a></li>
<li><a href="http://dataskeptic.com">Data Skeptic</a></li>
</ul>
<p>Some that are supposed to be good but never tried:</p>
<ul>
<li>Not so standard deviations</li>
<li>Data science at home</li>
<li>Talking machines</li>
</ul>
</section>
<section id="online-courses" class="level3">
<h3 class="anchored" data-anchor-id="online-courses">Online Courses</h3>
<p>A few awesome courses.</p>
<ul>
<li><p><a href="http://coursera.org/learn/machine-learning">Andrew Ng Coursera</a><br>
A good first course, which teaches you bottom up, from basics to advanced techniques. Matlab/Octave.</p></li>
<li><p><a href="http://fast.ai">Fast.ai</a><br>
A course which aims to teach by coding, and takes a top down approach.</p></li>
<li><p><a href="http://cs231n.stanford.edu/">CS231n: Convolutional Neural Networks for Visual Recognition</a> While focused on computer vision, this Stanford course provides an excellent introduction to deep learning concepts.</p></li>
</ul>
</section>
<section id="staying-up-to-date" class="level3">
<h3 class="anchored" data-anchor-id="staying-up-to-date">Staying Up-to-Date</h3>
<p>One of the best things about the machine learning field is how much work happens in the open.</p>
<p>Many researchers publish their work on arXiv months or even years before it appears in journals or at conferences. Following key researchers and institutions on Twitter is an excellent way to stay informed about the latest developments as they happen.</p>
<p>Some great accounts to follow: <span class="citation" data-cites="goodfellow_ian">@goodfellow_ian</span>, <span class="citation" data-cites="ylecun">@ylecun</span>, <span class="citation" data-cites="karpathy">@karpathy</span>, <span class="citation" data-cites="gwern">@gwern</span>.</p>
<p>Don’t be afraid of reading arXiv papers, they might seem intimidating in the beginning but they get easier over time.</p>


</section>

 ]]></description>
  <category>AI</category>
  <guid>https://www.arjunsriva.com/posts/learning-machine-learning/</guid>
  <pubDate>Sun, 12 Nov 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Game Of Thrones quiz</title>
  <link>https://www.arjunsriva.com/posts/game-of-thrones-quiz/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/game-of-thrones-quiz/gameofthronesquiz.jpg" class="img-fluid figure-img"></p>
<figcaption>Game Of Thrones Quiz</figcaption>
</figure>
</div>
<p>This quiz was created as part of cultural week, right as Game of Thrones season 7 ended.<br>
It is broken into 3 seperate rounds</p>
<ol type="1">
<li>first round, acts as elimination to reduce the number of teams that play.</li>
<li>second round where each team sees one question at a time and can write their answers, and the quiz master checks if they got it right and awards +1 for correct answers. the correct answer is revealed after each question.</li>
<li>third round consists of Connect questions, where for each question a series of hints are given, with the total points awarded for correct points reducing as the number of hints increase.</li>
</ol>
<section id="first-round" class="level2">
<h2 class="anchored" data-anchor-id="first-round">First round</h2>
<p><a href="./prelims.pdf">Questions</a><br>
<a href="./prelims_answers.pdf">Answers</a></p>
</section>
<section id="second-round" class="level2">
<h2 class="anchored" data-anchor-id="second-round">Second round</h2>
<p><a href="./round2.pdf">Slides</a></p>
<p><a href="./1.mp4">video for question 1</a><br>
<a href="./2.mp3">music for question 2</a><br>
<a href="./3.mp4">video for question 3</a></p>
</section>
<section id="third-round" class="level2">
<h2 class="anchored" data-anchor-id="third-round">Third round</h2>
<p><a href="./Connect.pdf">Connect</a></p>


</section>

 ]]></description>
  <category>IIT Indore</category>
  <category>Quiz</category>
  <guid>https://www.arjunsriva.com/posts/game-of-thrones-quiz/</guid>
  <pubDate>Mon, 04 Sep 2017 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/game-of-thrones-quiz/gameofthronesquiz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Newbie quiz</title>
  <link>https://www.arjunsriva.com/posts/newbie-quiz/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/newbie-quiz/newbiequiz.jpeg" class="img-fluid figure-img"></p>
<figcaption>Newbie Quiz</figcaption>
</figure>
</div>
<p>Indraneel and I had prepared this quiz as a way of introducting quizzing to new people and narrowing down potential recruits. The quiz covers a broad range of topics, from pop culture, sports, technology, politics</p>
<p>Lots of fun!</p>
<section id="questions" class="level3">
<h3 class="anchored" data-anchor-id="questions">Questions</h3>
<p>Get the <a href="./Questions.pdf">questions.</a></p>
</section>
<section id="answers" class="level3">
<h3 class="anchored" data-anchor-id="answers">Answers</h3>
<p>Get the <a href="./Answers.pdf">answers.</a></p>


</section>

 ]]></description>
  <category>IIT Indore</category>
  <category>Quiz</category>
  <guid>https://www.arjunsriva.com/posts/newbie-quiz/</guid>
  <pubDate>Sun, 20 Aug 2017 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/newbie-quiz/newbiequiz.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mental Health Checklists</title>
  <link>https://www.arjunsriva.com/posts/mental-health-checklist/</link>
  <description><![CDATA[ 





<p>Some quizes I made so it’s easy to keep track of mental health.</p>
<ul>
<li>Burn’s depression Checklist use it <a href="https://arjunsriva.com/bdc/">here</a></li>
<li>Novaco’s Anger Scale use it <a href="https://arjunsriva.com/nas/">here</a></li>
</ul>



 ]]></description>
  <category>Projects</category>
  <guid>https://www.arjunsriva.com/posts/mental-health-checklist/</guid>
  <pubDate>Sun, 08 Jan 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>About this website</title>
  <link>https://www.arjunsriva.com/posts/about-this-website/</link>
  <description><![CDATA[ 





<p>This post is a bit of a meta post about arjunsriva.com</p>
<p>A lot of my thinking on personal websites has been influenced by other great websites like Gwern’s, please <a href="https://gwern.net/about">read this</a> if you’re interested in it.</p>
<p>My goals for this websites are:</p>
<ul>
<li>To share things I learned that I personally found useful</li>
<li>To provide a playground for me to flesh out rough ideas and speculate.</li>
<li>To help me increase the clarity of my thinking by the act of writing something out.</li>
</ul>
<p>on the implementation side my goals are</p>
<ul>
<li>Make it easy for me to never lose data
<ul>
<li>most writing is stored as simple text files, version controlled by git</li>
</ul></li>
<li>Make it easy to mix code and prose to explain certain concepts</li>
</ul>
<p>Some things that I plan on implementing later as I write more are:</p>
<ul>
<li>Automatic link archiving to prevent link rot</li>
<li>Confidence tags to show how certain I am of different things</li>
<li>Better sections / tagging to differentiate different kinds of posts, eg. reading list and notes</li>
</ul>



 ]]></description>
  <category>Meta</category>
  <guid>https://www.arjunsriva.com/posts/about-this-website/</guid>
  <pubDate>Fri, 01 Jan 2016 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
