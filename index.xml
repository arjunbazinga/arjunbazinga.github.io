<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Arjun Srivastava</title>
<link>https://www.arjunsriva.com/</link>
<atom:link href="https://www.arjunsriva.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.55</generator>
<lastBuildDate>Sun, 21 Mar 2021 00:00:00 GMT</lastBuildDate>
<item>
  <title>Experimentation Platforms</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/exerimentations-platforms/</link>
  <description><![CDATA[ 





<section id="books" class="level2">
<h2 class="anchored" data-anchor-id="books">Books</h2>
<ul>
<li><a href="https://www.arjunsriva.com/library/book_1/book_1183.html">Trustworthy Online Controlled Experiments</a></li>
</ul>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ul>
<li><p><a href="https://research.fb.com/wp-content/uploads/2019/06/Top-Challenges-from-the-first-Practical-Online-Controlled-Experiments-Summit.pdf">Top Challenges from the first Practical Online Controlled Experiments Summit</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=HEGI5QN3fXE">A/B Testing Pitfalls: Getting Numbers You Can Trust is Hard</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=wT3dBSVGgjA">USF Business Analytics Forum - Ron Kohavi</a></p></li>
<li><p><a href="http://videolectures.net/kdd2017_tutorial15_software_innovation/">A/B Testing at Scale: Accelerating Software Innovation</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=kTAFOCynWIg">Trustworthy Online Controlled Experiments at Large Scale</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=BanBrr3Hzm8">Always Valid Inference: Continuous Monitoring of A/B Tests</a></p></li>
</ul>
</section>
<section id="companies" class="level2">
<h2 class="anchored" data-anchor-id="companies">Companies</h2>
<section id="netflix" class="level4">
<h4 class="anchored" data-anchor-id="netflix">Netflix</h4>
<ul>
<li><p><a href="https://netflixtechblog.com/tagged/experimentation">Netflix Articles tagged Experimentation</a></p></li>
<li><p><a href="https://netflixtechblog.com/its-all-a-bout-testing-the-netflix-experimentation-platform-4e1ca458c15">It’s All A/Bout Testing: The Netflix Experimentation Platform</a></p></li>
<li><p><a href="https://netflixtechblog.com/reimagining-experimentation-analysis-at-netflix-71356393af21">Reimagining Experimentation Analysis at Netflix</a></p></li>
<li><p><a href="https://drive.google.com/file/d/1TjTkgSzGQXtFxro5vdInUUIpsmJPdCiO/view">Success stories from a democratized experimentation platform</a></p></li>
<li><p><a href="https://netflixtechblog.com/key-challenges-with-quasi-experiments-at-netflix-89b4f234b852">Key Challenges with Quasi Experiments at Netflix</a></p></li>
<li><p><a href="https://netflixtechblog.com/data-compression-for-large-scale-streaming-experimentation-c20bfab8b9ce">Data Compression for Large-Scale Streaming Experimentation</a></p></li>
<li><p><a href="https://netflixtechblog.com/page-simulator-fa02069fb269">Page Simulation for Better Offline Metrics at Netflix</a></p></li>
<li><p><a href="https://netflixtechblog.com/streaming-video-experimentation-at-netflix-visualizing-practical-and-statistical-significance-7117420f4e9a">Streaming Video Experimentation at Netflix: Visualizing Practical and Statistical Significance</a></p></li>
<li><p><a href="https://netflixtechblog.com/interleaving-in-online-experiments-at-netflix-a04ee392ec55">Innovating Faster on Personalization Algorithms at Netflix Using Interleaving</a></p></li>
</ul>
</section>
<section id="microsoft" class="level4">
<h4 class="anchored" data-anchor-id="microsoft">Microsoft</h4>
<ul>
<li><a href="https://exp-platform.com/">ExP Experimentation Platform Accelerating software innovation through trustworthy experimentation</a></li>
<li><a href="https://ai.stanford.edu/~ronnyk/ExPThinkWeek2009Public.pdf">Online Experimentation at Microsoft</a></li>
<li><a href="https://www.microsoft.com/en-us/research/group/experimentation-platform-exp/">Experimentation Platform</a></li>
<li><a href="https://www.microsoft.com/en-us/research/group/experimentation-platform-exp/articles/a-b-testing-and-covid-19-data-driven-decisions-in-times-of-uncertainty/">A/B Testing and Covid-19: Data-Driven Decisions in Times of Uncertainty</a></li>
<li><a href="https://www.microsoft.com/en-us/research/group/experimentation-platform-exp/articles/patterns-of-trustworthy-experimentation-pre-experiment-stage/">Patterns of Trustworthy Experimentation: Pre-Experiment Stage</a></li>
</ul>
</section>
<section id="twitter" class="level4">
<h4 class="anchored" data-anchor-id="twitter">Twitter</h4>
<ul>
<li><a href="https://blog.twitter.com/engineering/en_us/a/2015/twitter-experimentation-technical-overview.html">Twitter experimentation: technical overview</a></li>
</ul>
</section>
<section id="google" class="level4">
<h4 class="anchored" data-anchor-id="google">Google</h4>
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36500.pdf">Overlapping Experiment Infrastructure: More, Better, Faster Experimentation</a></li>
</ul>
</section>
<section id="facebook" class="level4">
<h4 class="anchored" data-anchor-id="facebook">Facebook</h4>
<ul>
<li><a href="http://facebook.github.io/planout/">PlanOut is a library and interpreter for designing online experiments.</a></li>
<li><a href="https://github.com/facebook/Ax">Adaptive Experimentation Platform</a></li>
</ul>
</section>
<section id="spotify" class="level4">
<h4 class="anchored" data-anchor-id="spotify">Spotify</h4>
<ul>
<li><a href="https://engineering.atspotify.com/2020/10/29/spotifys-new-experimentation-platform-part-1/">Spotify’s New Experimentation Platform part 1</a></li>
<li><a href="https://engineering.atspotify.com/2020/11/02/spotifys-new-experimentation-platform-part-2/">Spotify’s New Experimentation Platform part 2</a></li>
<li><a href="https://www.infoq.com/news/2016/12/large-experimentation-spotify/">Large Scale Experimentation at Spotify</a></li>
</ul>
</section>
<section id="tinder" class="level4">
<h4 class="anchored" data-anchor-id="tinder">Tinder</h4>
<ul>
<li><a href="https://medium.com/tinder-engineering/phoenix-tinders-testing-platform-part-i-8e51c19ca977">Phoenix — Tinder’s Testing Platform, Part — I</a></li>
<li><a href="https://medium.com/tinder-engineering/phoenix-tinders-testing-platform-part-ii-e99fbc72af55">Phoenix — Tinder’s Testing Platform — Part II</a></li>
<li><a href="https://medium.com/tinder-engineering/phoenix-tinders-testing-platform-part-iii-520728b9537">Phoenix — Tinder’s Testing Platform — Part III</a></li>
</ul>
</section>
<section id="linkedin" class="level4">
<h4 class="anchored" data-anchor-id="linkedin">LinkedIn</h4>
<ul>
<li><a href="https://engineering.linkedin.com/blog/2020/our-evolution-towards-t-rex--the-prehistory-of-experimentation-i">Our evolution towards T-REX: The prehistory of experimentation infrastructure at LinkedIn</a></li>
<li><a href="https://engineering.linkedin.com/blog/2020/making-the-linkedin-experimentation-engine-20x-faster">Making the LinkedIn experimentation engine 20x faster</a></li>
</ul>
</section>
<section id="uber" class="level4">
<h4 class="anchored" data-anchor-id="uber">Uber</h4>
<ul>
<li><a href="https://eng.uber.com/xp/">Under the Hood of Uber’s Experimentation Platform</a></li>
<li><a href="https://conferences.oreilly.com/strata/strata-ny-2018/public/schedule/detail/69126.html">A/B testing at Uber: How we built a BYOM (bring your own metrics) platform</a></li>
<li><a href="https://eng.uber.com/experimentation-platform/">Building an Intelligent Experimentation Platform with Uber Engineering</a></li>
</ul>
</section>
<section id="airbnb" class="level4">
<h4 class="anchored" data-anchor-id="airbnb">AirBnB</h4>
<ul>
<li><a href="https://medium.com/airbnb-engineering/4-principles-for-making-experimentation-count-7a5f1a5268a">4 Principles for Making Experimentation Count</a></li>
<li><a href="https://medium.com/airbnb-engineering/https-medium-com-jonathan-parks-scaling-erf-23fd17c91166">Scaling Airbnb’s Experimentation Platform</a></li>
<li><a href="https://medium.com/airbnb-engineering/experiment-reporting-framework-4e3fcd29e6c0#.cbl72jip2">Experiment Reporting Framework</a></li>
</ul>
</section>
<section id="instagram" class="level4">
<h4 class="anchored" data-anchor-id="instagram">Instagram</h4>
<ul>
<li><a href="https://instagram-engineering.com/lessons-learned-at-instagram-stories-and-feed-machine-learning-54f3aaa09e56">Lessons Learned at Instagram Stories and Feed Machine Learning</a></li>
</ul>
</section>
<section id="go-jek" class="level4">
<h4 class="anchored" data-anchor-id="go-jek">Go-Jek</h4>
<ul>
<li><a href="https://blog.gojekengineering.com/introducing-litmus-gojeks-own-experimentation-platform-3803467b6a53">Introducing Litmus: GOJEK’s Own Experimentation Platform</a></li>
</ul>
</section>
<section id="instacart" class="level4">
<h4 class="anchored" data-anchor-id="instacart">InstaCart</h4>
<ul>
<li><a href="https://tech.instacart.com/it-all-depends-4bb7b22e854b">Randomized, controlled experiments and multivariate regression are used to continuously improve the grocery delivery engine</a></li>
</ul>
</section>
<section id="pintrest" class="level4">
<h4 class="anchored" data-anchor-id="pintrest">Pintrest</h4>
<ul>
<li><a href="https://medium.com/pinterest-engineering/building-pinterests-a-b-testing-platform-ab4934ace9f4">Building Pinterest’s A/B testing platform</a></li>
</ul>
</section>
</section>
<section id="conferences" class="level2">
<h2 class="anchored" data-anchor-id="conferences">Conferences</h2>
<ul>
<li><a href="https://experimentationcultureawards.com/#register">Experimentation Culture Awards</a></li>
</ul>
</section>
<section id="sass-solutions" class="level2">
<h2 class="anchored" data-anchor-id="sass-solutions">SASS solutions</h2>
<ul>
<li><a href="https://www.split.io/">Split.io</a></li>
<li><a href="https://www.optimizely.com/">Optimizely</a></li>
</ul>
</section>
<section id="when-you-cant-run-ab-tests" class="level2">
<h2 class="anchored" data-anchor-id="when-you-cant-run-ab-tests">When you can’t run A/B Tests</h2>
<ul>
<li><a href="https://netflixtechblog.com/quasi-experimentation-at-netflix-566b57d2e362">Quasi Experimentation at Netflix</a></li>
<li><a href="https://netflixtechblog.com/key-challenges-with-quasi-experiments-at-netflix-89b4f234b852">Key Challenges with Quasi Experiments at Netflix</a></li>
<li><a href="https://www.arjunsriva.com/library/book_1/book_1176.html">Mostly Harmless Econometrics: An Empiricist’s Companion</a></li>
</ul>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<section id="codemit-experimentation-platforms" class="level3">
<h3 class="anchored" data-anchor-id="codemit-experimentation-platforms"><a href="https://youtu.be/8yLC5oBP9fI">2020 CODE@MIT Experimentation platforms</a></h3>
<ul>
<li>Gaussian processes</li>
<li>Multi touch attributions</li>
<li>Heterogenous treatment effect</li>
<li>Interaction effects</li>
<li>Overlapping experiments</li>
<li>What are potential over evaluation criteria ?</li>
<li>What are good guardrail metrics ?</li>
<li>run A/A tests.</li>
</ul>
<p>Canary Deploys by using Experimentation platform to tell when you break guard rail metrics</p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>Experimentation</category>
  <guid>https://www.arjunsriva.com/posts/exerimentations-platforms/</guid>
  <pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/exerimentations-platforms/experimentation.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Course Schedule Generator</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/course-schedule-generator/</link>
  <description><![CDATA[ 





<p>A website which allows students of IIT Indore to add courses they are interested in to their calendar.<br>
I was tired of doing this manually every time.<br>
Use it <a href="https://arjunbazinga.github.io/course-schedule-generator/">here</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>IIT Indore</category>
  <guid>https://www.arjunsriva.com/posts/course-schedule-generator/</guid>
  <pubDate>Wed, 08 Jan 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Harry Potter quiz</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/harry-potter-quiz/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/harry-potter-quiz/pottermania.jpg" class="img-fluid figure-img"></p>
<figcaption>Pottermania 2018</figcaption>
</figure>
</div>
<p>The goal of the is to be something easy that anybody with little experience in quizzing can take part in. created with Bitan, and Keyur as part of Quiz club.</p>
<section id="questions" class="level3">
<h3 class="anchored" data-anchor-id="questions">Questions</h3>
<p>Get the <a href="./Questions.pdf">questions.</a></p>
<p>Get the <a href="https://youtu.be/gskB-IyGD6I">video for question number 14</a></p>
<p>Get the <a href="./music.mp3">Music for question number 20</a></p>
</section>
<section id="answers" class="level3">
<h3 class="anchored" data-anchor-id="answers">Answers</h3>
<p>Get the <a href="./PotterMania-Answers.pdf">answers.</a></p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>IIT Indore</category>
  <category>Quiz</category>
  <guid>https://www.arjunsriva.com/posts/harry-potter-quiz/</guid>
  <pubDate>Sun, 26 Aug 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/harry-potter-quiz/pottermania.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The state of reading in 2018 and beyond.</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/state-of-reading/</link>
  <description><![CDATA[ 





<p>Audio books are seeing a resurgence, because of companies like Audible.<br>
Text to speech is good, and is getting <a href="https://deepmind.com/blog/article/wavenet-generative-model-raw-audio">better</a> .<br>
Wireless Bluetooth <a href="https://www.apple.com/airpods/">earphones</a> are becoming common place, the increase in convenience and battery life allows people to have them on longer.<br>
Unlike content that you have to watch/read, you can work on other stuff while you listen.<br>
I see a time where we can listen to most of the things we read.<br>
Creates a whole new kind of medium.<br>
News, blog posts and Stories most affected.<br>
Most of the speech generated by machines.<br>
Most of the classic texts available for free on the <a href="http://libgen.is/">internet</a>.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>Future</category>
  <guid>https://www.arjunsriva.com/posts/state-of-reading/</guid>
  <pubDate>Sun, 05 Aug 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Friend Or Foe</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/friend-or-foe/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/friend-or-foe/environment.jpg" class="img-fluid figure-img"></p>
<figcaption>Co-opeartive and Adversarial Environments</figcaption>
</figure>
</div>
<p>This is a mini interactive “game”, I made inspired by the paper, without giving too much away, I urge you to <a href="https://arjunsriva.com/fof">play</a>.</p>
<p><a href="https://arxiv.org/abs/1711.09883">AI Safety Grid Worlds</a>,</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>AI</category>
  <category>Projects</category>
  <guid>https://www.arjunsriva.com/posts/friend-or-foe/</guid>
  <pubDate>Sat, 28 Jul 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/friend-or-foe/environment.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Infant Mortality In India</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/infant-mortality/</link>
  <description><![CDATA[ 





<p>I thought about this after reading <a href="https://www.arjunsriva.com/library/book_0/book_8.html">Doing good better</a>.</p>
<p>Soon after I found out about kepler.gl which made this the perfect project to test it out.</p>
<p>I extracted the data I needed for my analysis from a PDF of an annual summary report by the Government of India, available <a href="https://nrhm-mis.nic.in/Pages/RHS2017.aspx">here</a>, as I couldn’t find a comprehensive and user-friendly source.</p>
<p>You can read the analysis <a href="https://arjunsriva.com/infantmortality">here</a>.</p>
<p><a href="https://kepler.gl/#/demo?mapUrl=https://raw.githubusercontent.com/arjunbazinga/arjunbazinga.github.io/gh-pages/posts/infant-mortality/kepler.gl.json">Here</a> is the kepler.gl map I created for this analysis.</p>
<p>It contains the following layers:</p>
<ul>
<li>Total Lives Lost: The number of infants who died in each state. The height of each region is proportional to the number of lives lost, with redder regions having a higher infant mortality rate.</li>
<li>Total Population : The population of each state. The height of each region is proportional to the population, with bluer regions having a higher birth rate.</li>
<li>Total Lives Lost Rural: The same as Total Lives Lost, but only for rural areas in each state.</li>
<li>Total Lives Lost Urban: The same as Total Lives Lost, but only for urban areas in each state.</li>
</ul>
<p>Once the map loads you can click on the layers on the right to toggle them on and off. You can also click on the layers to see the data for each region.</p>
<p>The json file for the map is available <a href="kepler.gl.json">here</a>.</p>
<iframe src="https://kepler.gl/#/demo?mapUrl=https://raw.githubusercontent.com/arjunbazinga/arjunbazinga.github.io/gh-pages/posts/infant-mortality/kepler.gl.json" style="border:0px #ffffff none;" name="myiFrame" scrolling="no" frameborder="1" marginheight="0px" marginwidth="0px" height="70%" width="100%" allowfullscreen=""></iframe>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>Analysis</category>
  <guid>https://www.arjunsriva.com/posts/infant-mortality/</guid>
  <pubDate>Fri, 15 Jun 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/infant-mortality/infantmortality.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Jargonizer</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/jargonizer/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/jargonizer/jargonizer.webp" class="img-fluid figure-img"></p>
<figcaption>Jargonizer</figcaption>
</figure>
</div>
<p>What if instead of aiming for clarity and conciesness, our goal was to make our sentences as unweildy and hard to understand as possible?</p>
<p>A simple way to do this is to replace easy to understand phrases with harder ones. Wikipedia <a href="https://web.archive.org/web/20190622035102/https://en.wikipedia.org/wiki/List_of_plain_English_words_and_phrases">maintains</a><sup>1</sup> one such list for us. <a href="https://arjunbazinga.github.io/jargonizer">Here is the website</a> I made so you can play with it online as well, it all runs in your browser, no text is sent to a server.</p>
<p>Reading at the output generated from this, I can’t help but feel like I am reading a legal document.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Used to 🥲↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>Projects</category>
  <guid>https://www.arjunsriva.com/posts/jargonizer/</guid>
  <pubDate>Tue, 12 Jun 2018 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/jargonizer/jargonizer.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Multi Armed Bandits</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits.html</link>
  <description><![CDATA[ 





<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>Imagine you are at a casino, and you have N slot machines to play, each slot machine gives rewards according to a fixed probability distribution. What strategy should you play with to maximise your total reward ?</p>
<p>This problem is known as <a href="https://en.wikipedia.org/wiki/Multi-armed_bandit">Multi Armed Bandit</a> problem.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importing numpy for math, and matplotlib for plots</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
</section>
<section id="arms" class="level2">
<h2 class="anchored" data-anchor-id="arms">Arms</h2>
<p>An arm when pulled, gives a random number from a normal distribution with fixed mean(mu) and deviation(sigma). When pulled many times the frequency of the rewards look like this:</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Normal_Distribution_PDF.svg/350px-Normal_Distribution_PDF.svg.png" class="img-fluid" alt="normal distribution"> X axis is the magnitude of reward<br>
Y axis is it’s frequency.</p>
<p>The Arm class provides an arm with these properties.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Arm:</span>
<span id="cb2-2"></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mu <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.absolute(np.random.uniform())</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu</span>
<span id="cb2-8">        </span>
<span id="cb2-9">        </span>
<span id="cb2-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> sigma <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.absolute(np.random.uniform())</span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma</span>
<span id="cb2-14"></span>
<span id="cb2-15"></span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> pull(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-17">        reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mu, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigma, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> reward</span>
<span id="cb2-19"></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_arms(k):</span>
<span id="cb2-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns a list of arms</span></span>
<span id="cb2-23">    arms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k):</span>
<span id="cb2-25">        arms.append(Arm())</span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> arms</span></code></pre></div>
</div>
</section>
<section id="agents" class="level2">
<h2 class="anchored" data-anchor-id="agents">Agents</h2>
<p>An agent here is a player who pulls arms to play. It has a policy, which is a list of probabilities associated with each arm.</p>
<p>The agent class makes designing agents <strong>fast</strong>. The object is initialised with arms and whether it should play all arms once as part of the initialisation.</p>
<p>Features provided by this class:<br>
Attributes: * expectations[i]: gives the expected reward on playing arm[i] * times_played[i]: gives the number of times the agent has played arm[i] * N = Total number of times agent has played * reward_history : list of rewards earned by the agent * choice_history : list of choices made by the agent</p>
<p>Methods: * gamble(i): Plays for i iterations while updating it’s policy. * play(i): Pulls arm[i] and updates reward_history, N , times_played * select_arm(): returns index of an arm by sampling probability distribution given by the policy</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> agent:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arms))</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.times_played <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arms))</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arms</span>
<span id="cb3-6"></span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(arms)</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.choice_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-12"></span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> play_once <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms):</span>
<span id="cb3-15">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.play(i)</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> play(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb3-18">        reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arms[index].pull()</span>
<span id="cb3-19"></span>
<span id="cb3-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.times_played[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.choice_history.append(index)</span>
<span id="cb3-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reward_history.append(reward)</span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> reward</span>
<span id="cb3-27"></span>
<span id="cb3-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_expectations(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, reward, index):</span>
<span id="cb3-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations[index])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N</span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_arm(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-35">        options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms)</span>
<span id="cb3-36">        i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(options, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.policy(), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> i</span>
<span id="cb3-38"></span>
<span id="cb3-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gamble(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, iterations):</span>
<span id="cb3-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(iterations):</span>
<span id="cb3-41">            index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.select_arm()</span>
<span id="cb3-42">            reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.play(index)</span>
<span id="cb3-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update_expectations(reward, index)</span></code></pre></div>
</div>
<section id="example-agents" class="level3">
<h3 class="anchored" data-anchor-id="example-agents">Example agents</h3>
<p>To make a new agent we <a href="">inherit</a> the agent class.</p>
<p>Time to make some agents!</p>
</section>
<section id="first-up-epsilon-greedy" class="level3">
<h3 class="anchored" data-anchor-id="first-up-epsilon-greedy">First up: epsilon-greedy</h3>
<p>This agent plays the arm with the highest expected reward with <em>1 - epsilon</em> probability, and plays a random arm with <em>epsilon</em> probability</p>
<p>So<br>
epsilon = 1 =&gt; random choices<br>
epsilon = 0 =&gt; greedy choices</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> epsilon_greedy(agent):</span>
<span id="cb4-2"></span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb4-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epsilon</span>
<span id="cb4-6">        </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epsilon-Greedy Agent, epsilon= "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon)</span>
<span id="cb4-9">    </span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-11">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)</span>
<span id="cb4-12">        temp[np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon</span>
<span id="cb4-13">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.number_of_arms</span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
</section>
<section id="beta-softmax" class="level3">
<h3 class="anchored" data-anchor-id="beta-softmax">Beta-Softmax</h3>
<p>This agent plays an arm[i] with probability proportional to: e^(expected_reward(arm[i])/beta)<br>
We normalise the whole thing by the sum over all the arms.</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> softmax(agent):</span>
<span id="cb5-2"></span>
<span id="cb5-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta</span>
<span id="cb5-6">        </span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Softmax agent, beta= "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb5-9"></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-11">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb5-12">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
</section>
<section id="upper-confidence-bound-ucb1" class="level3">
<h3 class="anchored" data-anchor-id="upper-confidence-bound-ucb1">Upper Confidence Bound (UCB1)</h3>
<p>UCB1 agent plays the arm with the highest metric, where metric of arm i is : metric[i] = expected_reward[i] + sqrt(2*log(N)/times_played[i])</p>
<p><strong>Note</strong> Best peformance when rewards are between 0 and 1</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ucb(agent):</span>
<span id="cb6-2"></span>
<span id="cb6-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb6-5"></span>
<span id="cb6-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UCB1 agent"</span></span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-10">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.N)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.times_played)</span>
<span id="cb6-11">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(temp)</span>
<span id="cb6-12">        ans[np.argmax(temp)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span></code></pre></div>
</div>
</section>
</section>
<section id="metrics" class="level2">
<h2 class="anchored" data-anchor-id="metrics">Metrics</h2>
<p>Metric : A scalar number, makes comparison easier.<br>
To compare the performance of our agents we can use these metrics</p>
<ul>
<li><p>avg_reward[i] : this gives the average reward till i+1 iteration.</p></li>
<li><p>max_reward : this tells us the maximum expected reward</p></li>
<li><p>euclid_distance : we can think of as learnt policy and optimal policy as vectors and compute the distance between them , smaller is better</p></li>
<li><p>cosine_simmilarity : compute the cos(q) between the policies. larger is better</p></li>
</ul>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> maxreward(arms):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Max rewards</span></span>
<span id="cb7-3">    a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [arm.mu <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> arms]</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(a)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> avg_reward(rewards):</span>
<span id="cb7-7">    ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-8">    ans.append(rewards[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rewards)):</span>
<span id="cb7-10">        ans.append(ans[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>rewards[i])</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ans)):</span>
<span id="cb7-12">        ans[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cosine_similarity(a,b):</span>
<span id="cb7-16">    temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b</span>
<span id="cb7-17">    temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span>(euclid_distance(a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> euclid_distance(b))</span>
<span id="cb7-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-19">    </span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> euclid_distance(a):</span>
<span id="cb7-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.sqrt(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<section id="test" class="level3">
<h3 class="anchored" data-anchor-id="test">Test</h3>
<p>This function takes a list of agents and the number of iterations. Makes each agent play, and prints its metrics.</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test(agents, iterations):</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> agent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> agents:</span>
<span id="cb8-3">        </span>
<span id="cb8-4">        agent.gamble(iterations)</span>
<span id="cb8-5">        </span>
<span id="cb8-6">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ arm.mu <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> levers] </span>
<span id="cb8-7">        optimal_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(agent.expectations)</span>
<span id="cb8-8">        optimal_policy[temp.index(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(temp))] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-9">        </span>
<span id="cb8-10">        avg_rewards_earned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> avg_reward(agent.reward_history)</span>
<span id="cb8-11">        </span>
<span id="cb8-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(agent)</span>
<span id="cb8-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maximum possible reward:"</span>, maxreward(levers))</span>
<span id="cb8-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average reward:"</span>, avg_rewards_earned[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb8-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine similarity"</span> ,cosine_similarity(agent.policy(), optimal_policy))</span>
<span id="cb8-16">        euclid_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> euclid_distance(agent.policy()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>optimal_policy)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(optimal_policy)</span>
<span id="cb8-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"euclidian norm "</span>,euclid_norm)</span>
<span id="cb8-18">        </span>
<span id="cb8-19">        </span>
<span id="cb8-20">        plt.plot(avg_rewards_earned)</span>
<span id="cb8-21">        plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Average Reward'</span>)</span>
<span id="cb8-22">        plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iteration'</span>)</span>
<span id="cb8-23">        plt.show()</span>
<span id="cb8-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-25">    </span>
<span id="cb8-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("optimal policy:" , optimal)</span></span>
<span id="cb8-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("learnt policy:" ,agent.policy())</span></span>
<span id="cb8-28">        </span>
<span id="cb8-29">    </span>
<span id="cb8-30">        </span>
<span id="cb8-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.scatter(range(len(agent.choice_history)),y=agent.choice_history)</span></span>
<span id="cb8-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.title("Choices")</span></span>
<span id="cb8-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.xlabel("time")</span></span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.ylabel("arm")</span></span>
<span id="cb8-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.show()</span></span>
<span id="cb8-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("\n")</span></span>
<span id="cb8-37">    </span>
<span id="cb8-38">    </span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">levers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_arms(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3">agents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-4">    epsilon_greedy(levers, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb9-5">    epsilon_greedy(levers, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb9-6">    softmax(levers, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>),</span>
<span id="cb9-7">    ucb(levers)</span>
<span id="cb9-8"></span>
<span id="cb9-9">]</span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plt.plot([ arm.mu <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> levers] )</span>
<span id="cb10-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distribution of expected value of arms"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Text(0.5, 1.0, 'distribution of expected value of arms')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-11-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-20" class="cell" data-scrolled="false" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">test(agents, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epsilon-Greedy Agent, epsilon= 1
maximum possible reward: 0.9851042878107023
average reward: [0.47962497]
cosine similarity 0.3162277660168379
euclidian norm  0.09486832980505139</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

Epsilon-Greedy Agent, epsilon= 0
maximum possible reward: 0.9851042878107023
average reward: [0.98686237]
cosine similarity 1.0
euclidian norm  0.0</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

Softmax agent, beta= 0.1
maximum possible reward: 0.9851042878107023
average reward: [0.91348264]
cosine similarity 0.9992727823574249
euclidian norm  0.008915931500017809</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

UCB1 agent
maximum possible reward: 0.9851042878107023
average reward: [0.89258379]
cosine similarity 0.0
euclidian norm  0.1414213562373095</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits_files/figure-html/cell-12-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
</code></pre>
</div>
</div>
</section>
<section id="experimental-stuff" class="level3">
<h3 class="anchored" data-anchor-id="experimental-stuff">Experimental stuff:</h3>
<p>Below are a few agents I wrote for fun.</p>
<div id="cell-22" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> softmax_with_exponentiation(agent):</span>
<span id="cb18-3"></span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb18-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta</span>
<span id="cb18-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.exp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp</span>
<span id="cb18-8"></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-10">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb18-11">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-12">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.exp</span>
<span id="cb18-13">        ans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(ans, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span>
<span id="cb18-15"></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> softmax_with_reccurence(agent):</span>
<span id="cb18-18"></span>
<span id="cb18-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb18-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.l</span>
<span id="cb18-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> beta</span>
<span id="cb18-23"></span>
<span id="cb18-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-25">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta)</span>
<span id="cb18-26">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-27"></span>
<span id="cb18-28">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.multiply(new_policy, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy)</span>
<span id="cb18-29">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(result, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result</span>
<span id="cb18-31"></span>
<span id="cb18-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb18-33"></span>
<span id="cb18-34"></span>
<span id="cb18-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> greedy_with_reccurence(agent):</span>
<span id="cb18-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha = number &lt; 1; will sum over a number of observations and will keep</span></span>
<span id="cb18-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># osiclating.</span></span>
<span id="cb18-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha = N will allow the algo to converge to an arm, greedy doesn't</span></span>
<span id="cb18-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># really need this, kind of always give one answer.</span></span>
<span id="cb18-40"></span>
<span id="cb18-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, arms, play_once<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-42">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(arms, play_once)</span>
<span id="cb18-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)</span>
<span id="cb18-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha</span>
<span id="cb18-45"></span>
<span id="cb18-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-47">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)</span>
<span id="cb18-48">        new_policy[np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.expectations)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-49"></span>
<span id="cb18-50">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy</span>
<span id="cb18-51"></span>
<span id="cb18-52">        new_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(new_policy, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.old_policy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_policy</span>
<span id="cb18-54"></span>
<span id="cb18-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> new_policy</span>
<span id="cb18-56"></span>
<span id="cb18-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class magic(agent):</span></span>
<span id="cb18-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    def __init__(self, arms, play_once=1, exp=1):</span></span>
<span id="cb18-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        super().__init__(arms, play_once)</span></span>
<span id="cb18-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        self.old_policy = np.ones_like(self.expectations)/self.l</span></span>
<span id="cb18-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        self.exp = exp</span></span>
<span id="cb18-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb18-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    def policy(self):</span></span>
<span id="cb18-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        new_policy = f(old_policy, g(expectations))</span></span></code></pre></div>
</div>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>AI</category>
  <guid>https://www.arjunsriva.com/posts/multi-armed-bandits/multi-armed-bandits.html</guid>
  <pubDate>Sun, 12 Nov 2017 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/multi-armed-bandits/MultiArmedBandits.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Learning Machine Learning</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/learning-machine-learning/</link>
  <description><![CDATA[ 





<p>This post will talk about how I’m going about learning machine learning.</p>
<p>Mostly online content.</p>
<section id="podcasts" class="level3">
<h3 class="anchored" data-anchor-id="podcasts">Podcasts</h3>
<p>These podcasts are amazing,and what got me interested in the first place. Get a podcast app, I love podcast addict (android). Some awesome podcasts:<br>
* <a href="http://partiallyderivative.com">Partially Derivative</a> * <a href="http://lineardigressions.com/">Linear Digressions</a> * <a href="http://dataskeptic.com">Data Skeptic</a></p>
<p>Some that are supposed to be good but never tried: * Not so standard deviations * Data science at home * Talking machines</p>
</section>
<section id="online-courses" class="level3">
<h3 class="anchored" data-anchor-id="online-courses">Online Courses</h3>
<p>A few awesome courses.</p>
<ul>
<li><p><a href="http://coursera.org/learn/machine-learning">Andrew Ng Coursera</a><br>
A good first course, which teaches you bottom up, from basics to advanced techniques. Matlab/Octave.</p></li>
<li><p><a href="http://fast.ai">Fast.ai</a><br>
A course which aims to teach by coding, and takes a top down approach.</p></li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>AI</category>
  <guid>https://www.arjunsriva.com/posts/learning-machine-learning/</guid>
  <pubDate>Sun, 12 Nov 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Game Of Thrones quiz</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/game-of-thrones-quiz/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/game-of-thrones-quiz/gameofthronesquiz.jpg" class="img-fluid figure-img"></p>
<figcaption>Game Of Thrones Quiz</figcaption>
</figure>
</div>
<p>This quiz was created as part of cultural week, right as Game of Thrones season 7 ended.<br>
It is broken into 3 seperate rounds</p>
<ol type="1">
<li>first round, acts as elimination to reduce the number of teams that play.</li>
<li>second round where each team sees one question at a time and can write their answers, and the quiz master checks if they got it right and awards +1 for correct answers. the correct answer is revealed after each question.</li>
<li>third round consists of Connect questions, where for each question a series of hints are given, with the total points awarded for correct points reducing as the number of hints increase.</li>
</ol>
<section id="first-round" class="level2">
<h2 class="anchored" data-anchor-id="first-round">First round</h2>
<p><a href="./prelims.pdf">Questions</a><br>
<a href="./prelims_answers.pdf">Answers</a></p>
</section>
<section id="second-round" class="level2">
<h2 class="anchored" data-anchor-id="second-round">Second round</h2>
<p><a href="./round2.pdf">Slides</a></p>
<p><a href="./1.mp4">video for question 1</a><br>
<a href="./2.mp3">music for question 2</a><br>
<a href="./3.mp4">video for question 3</a></p>
</section>
<section id="third-round" class="level2">
<h2 class="anchored" data-anchor-id="third-round">Third round</h2>
<p><a href="./Connect.pdf">Connect</a></p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>IIT Indore</category>
  <category>Quiz</category>
  <guid>https://www.arjunsriva.com/posts/game-of-thrones-quiz/</guid>
  <pubDate>Mon, 04 Sep 2017 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/game-of-thrones-quiz/gameofthronesquiz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Newbie quiz</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/newbie-quiz/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.arjunsriva.com/posts/newbie-quiz/newbiequiz.jpeg" class="img-fluid figure-img"></p>
<figcaption>Newbie Quiz</figcaption>
</figure>
</div>
<p>Indraneel and I had prepared this quiz as a way of introducting quizzing to new people and narrowing down potential recruits. The quiz covers a broad range of topics, from pop culture, sports, technology, politics</p>
<p>Lots of fun!</p>
<section id="questions" class="level3">
<h3 class="anchored" data-anchor-id="questions">Questions</h3>
<p>Get the <a href="./Questions.pdf">questions.</a></p>
</section>
<section id="answers" class="level3">
<h3 class="anchored" data-anchor-id="answers">Answers</h3>
<p>Get the <a href="./Answers.pdf">answers.</a></p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>IIT Indore</category>
  <category>Quiz</category>
  <guid>https://www.arjunsriva.com/posts/newbie-quiz/</guid>
  <pubDate>Sun, 20 Aug 2017 00:00:00 GMT</pubDate>
  <media:content url="https://www.arjunsriva.com/posts/newbie-quiz/newbiequiz.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mental Health Checklists</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/mental-health-checklist/</link>
  <description><![CDATA[ 





<p>Some quizes I made so it’s easy to keep track of mental health.</p>
<ul>
<li>Burn’s depression Checklist use it <a href="https://arjunsriva.com/bdc/">here</a></li>
<li>Novaco’s Anger Scale use it <a href="https://arjunsriva.com/nas/">here</a></li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>Projects</category>
  <guid>https://www.arjunsriva.com/posts/mental-health-checklist/</guid>
  <pubDate>Sun, 08 Jan 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>About this website</title>
  <dc:creator>Arjun Srivastava</dc:creator>
  <link>https://www.arjunsriva.com/posts/about-this-website/</link>
  <description><![CDATA[ 





<p>This post is a bit of a meta post about arjunsriva.com</p>
<p>A lot of my thinking on personal websites has been influenced by other great websites like Gwern’s, please <a href="https://gwern.net/about">read this</a> if you’re interested in it.</p>
<p>My goals for this websites are:</p>
<ul>
<li>To share things I learned that I personally found useful</li>
<li>To provide a playground for me to flesh out rough ideas and speculate.</li>
<li>To help me increase the clarity of my thinking by the act of writing something out.</li>
</ul>
<p>on the implementation side my goals are</p>
<ul>
<li>Make it easy for me to never lose data
<ul>
<li>most writing is stored as simple text files, version controlled by git</li>
</ul></li>
<li>Make it easy to mix code and prose to explain certain concepts</li>
</ul>
<p>Some things that I plan on implementing later as I write more are:</p>
<ul>
<li>Automatic link archiving to prevent link rot</li>
<li>Confidence tags to show how certain I am of different things</li>
<li>Better sections / tagging to differentiate different kinds of posts, eg. reading list and notes</li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <category>Meta</category>
  <guid>https://www.arjunsriva.com/posts/about-this-website/</guid>
  <pubDate>Fri, 01 Jan 2016 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
